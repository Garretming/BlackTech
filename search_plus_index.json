{"./":{"url":"./","title":"Introduction","keywords":"","body":"github上创建项目，拉到本地，再gitbook init # Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 19:14:06 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 19:14:06 "},"book/gitbook/advanced.html":{"url":"book/gitbook/advanced.html","title":"advanced.md","keywords":"","body":"Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/bookjson.html":{"url":"book/gitbook/bookjson.html","title":"book.json配置文件","keywords":"","body":"book.json配置文件 Error: file not found: /private/var/www/clark-xm.xyz/Gitbook_store/Import/BlackTechBook/book/gitbook/book.json Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/build.html":{"url":"book/gitbook/build.html","title":"npm install gitbook-plugin-插件名,","keywords":"","body":"npm init npm install gulp --save npm install gitbook-cli --save #开发工具 npm audit fix npm audit 创建README.md gitbook init #会自动create SUMMARY.md 配置book.json https://github.com/Garretming/blog npm install gitbook-plugin-插件名, npm install gh-pages --save-dev #发布测试工具 gitbook install gitbook build gh-pages -d _book 访问 https://Garretming.github.io/blog/ Readme file name (defaults to README.md) Summary Summary file name (defaults to SUMMARY.md) Part I Introduction 个人简历 关于博客 项目搭建 运行部署 更新文档 进阶功能 参考 Part II 知识库 操作系统 Mac Linux windows Unix 将Gitbook上的书籍发布在GitHubPages上 GitBook 是一个基于 Node.js 的命令行工具，可使用 Markdown 来制作精美的电子书. 但是Gitbook由于网络问题,许多其他人发布的项目不能直接查看,或者保存.但是我们可以通过Github将fork Gitbook 源码到自己的Github,并设置Github Pages 页面访问, 来实现保存Gitbook项目的目的. GitHub Pages 简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。我们就可以使用GitPages搭建自己的个人博客 由于 gitbook 书籍可以通过gitbook本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 ‘test’ 项目可以通过地址：chengweiv5.github.io/test来访问。 当访问Garretming.github.io/gitbook时，会访问Garretming/gitbook项目的_gh-pages分支的内容，所以需要为项目创建一个gh-pages分支，并且将静态站点内容放入其中。也就是说，gitbook 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 安装GitBook 安装Gitbook 安装node.js 编译安装或者对应的二进制安装 yum install nodejs 1 安装Gitbook 国内环境建议修改npm源为淘宝镜像站后再安装 npm install gitbook-cli -g gitbook -V 配置gitbook 可以在github上创建一个项目，然后clone到本地，进入项目根目录，执行gitbook init，编辑gitbook.json，SUMMARY.md，README.md，以及.gitignore book.json 默认插件 GitBook 默认带有5个插件： highlight search sharing fontsettings livereload 如果要去除自带的插件，可以在插件名称前面加 -： \"plugins\": [ \"-search\" ] 如果想配置直接在 pluginsConfig 配置。 book.json是gitbook的配置文件，包括插件的配置文件，通过插件可以丰富电子书的功能，有兴趣的可以去官方找找，很多很有意思的插件（插件越多js文件越多，我的vps流量计费，所以我的是乞丐版 T T） Usage Put this in your book.json: { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } And you’re done! --> \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"flow\": \"typescript\" }, \"ignore\": [ \"mermaid\", \"eval-js\" ] }, 贴一下我的book.json cat book.json { \"title\": \"clark's notes\", \"description\": \"好记性不如烂笔头，记录日常遇到的问题及学习的成果\", \"author\": \"clark\", \"output.name\": \"site\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"root\": \".\", \"links\": { \"sidebar\": { \"Home\": \"https://huangwj.app\" } }, \"plugins\": \\[ \"github@^2.0.0\", \"edit-link@^2.0.2\", \"anchors@^0.7.1\", \"include-codeblock@^3.0.2\", \"splitter@^0.0.8\", \"tbfed-pagefooter@^0.0.1\", \"expandable-chapters-small@^0.1.7\", \"anchor-navigation-ex@0.1.8\" \\], \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true }, \"github\": { \"url\": \"https://github.com/Garretming/gitbook\" }, \"include-codeblock\": { \"template\": \"ace\", \"unindent\": true, \"edit\": true }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © clark 2017\", \"modify\\_label\": \"该文件修订时间：\", \"modify\\_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"edit-link\": { \"base\": \"https://github.com/clark/gitbook/edit/master\", \"label\": \"Edit This Page\" }, \"anchor-navigation-ex\": { \"isRewritePageTitle\": false, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } 编写完成后在book.json文件目录执行如下命令安装插件 gitbook install SUMMARY.md 概要文件主要存放 GitBook 的文件目录信息，左侧的目录就是根据这个文件来生成的，它通过 Markdown 中的列表语法来表示文件的层级关系，下面是一个简单的示例： # Summary * [Introduction](README.md) * [个人简历](ABOUT_ME.md) * [关于博客](ABOUT_BLOG.md) * [知识库](knowledge.md) \\* \\[操作系统\\]\\(OS/os.md\\) \\* \\[Linux\\]\\(OS/linux/linux.md\\) \\* \\[windows\\]\\(OS/win/windows.md\\) \\* \\[Unix\\]\\(OS/unix/unix.md\\) 编写完成后，可以执行init命令让gitbook自动生成上述目录结构 $ gitbook init info: create SUMMARY.md info: initialization is finished README.md 电子书的主页，可以在book.json中修改 .gitignore 由于生成电子书时会产生大量的nodejs文件以及_gitbook的电子书文件，建议配置.gitignore [huangwj@instance-1 ~]$ cat /opt/huangwj/gitbook/.gitignore /_book/ /node_modules/ 生成gitbook电子书 主要配置文件编辑完成后，就可以生成gitbook电子书，默认生成html，可以在本地起服务查看，也可以将html拷贝到web服务器下查看 本地查看，默认端口4000，可以更改 $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 41 plugins are installed info: 15 explicitly listed info: loading plugin \"github\"... OK info: loading plugin \"edit-link\"... OK info: loading plugin \"anchors\"... OK info: loading plugin \"include-codeblock\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"expandable-chapters-small\"... OK info: loading plugin \"anchor-navigation-ex\"... OK info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 26 pages info: found 27 asset files warn: \"options\" property is deprecated, use config.get(key) instead info: >> generation finished with success in 5.0s ! Starting server ... Serving book on http://localhost:4000 部署webhook并与github联动 安装webhookit 安装webhookit，并生成默认配置文件，请注意自己的Python环境，调用相应的pip pip install webhookit webhookit_config > /opt/webhook/webhook_for_github.conf 修改配置文件 ​ 如果执行脚本在webhook本机，只需要修改如下两个参数 repo_name/branch_name修改成自己的项目名称和分支名 SCRIPT写入自己要执行的脚本 [huangwj@instance-1 ~]$ cat /opt/webhook/webhook_for_github.conf # -*- coding: utf-8 -*- ''' Created on May-25-18 19:10:16 @author: hustcc/webhookit ''' # This means: # When get a webhook request from `repo_name` on branch `branch_name`, # will exec SCRIPT on servers config in the array. WEBHOOKIT_CONFIGURE = { \\# a web hook request can trigger multiple servers. 'gitbook/master': \\[{ \\# if exec shell on local server, keep empty. 'HOST': '', \\# will exec shell on which server. 'PORT': '', \\# ssh port, default is 22. 'USER': '', \\# linux user name 'PWD': '', \\# user password or private key. \\# The webhook shell script path. 'SCRIPT': '/opt/huangwj/scripts/gitbook\\_update.sh &gt; /opt/huangwj/scripts/gitbook\\_update.log' }\\] } 我的脚本 [huangwj@instance-1 scripts]$ cat gitbook_update.sh #!/bin/bash source /etc/profile source /home/huangwj/.bash_profile date cd /opt/huangwj/gitbook git pull gitbook install gitbook build 启动webhookit webhookit -c /opt/webhook/webhook_for_github.conf -p port 1 启动完成后即可访问localhost:port查看webhook的信息及推送的URL，在github填入URL并配置type为json即可。 配置github 项目——setting——webhook——ADD webhook payload URL：填写webhookURL Content type ：application/json 触发条件可选，我这里选择的是Just the push event. 编译书籍 首先，创建一个文件夹,用户来存放要编译的书籍. mkdir book & & cd book 将需要编译的数据源码仓库从Github上clone到当前文件夹中. git clone git@github.com:Garretming/gitbook.git 使用gitbook build将书籍内容输出到默认目录，也就是当前目录下的_book目录。 gitbook build build 失败的可能是配置出现了错误,可以根据提示修改book.json 的配置信息.注意:记得修改book.json后提交到github上. git add book.json git commit -m \"update book.json\" git push -u origin master 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： git checkout --orphan gh-pages git rm -f --cached -r . git clean -df rm -rf *~ 现在，目录下应该只剩下_book目录了，首先，忽略一些文件： echo \"*~\" > .gitignore echo \"_book\" >> .gitignore git add .gitignore git commit -m \"Ignore some files\" 然后，加入_book下的内容到分支中： cp -r _book/* . git add . git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中book项目的gh-pages分支了，虽然这里还没有创建分支，上传和创建会一步完成！ git push -u origin gh-pages 首先先安装 gh-pages 工具 npm install g gh-pages 1 然后输入以下指令 gh-pages -d _book 现在，书籍的内容已经上传到 GitHub 上，所以通过访问meik-zhanggithub.io/test就可以阅读test这本书了！ 参考此书籍,总结完善后发表本文,并将此本书发布在Github Pages上. gitbook theme的——layout文件夹中的模板用来干什么的，最终的是怎么样和自己编写的markdown 文件内容结合起来一起输出html文件的。 https://github.com/lijiaocn/theme-lijiaocn How to remove “Published with Gitbook” #1404中提供两个方法，第二个修改模板的方法更好。 将GitbookIO/theme-default中的_layouts目录下载到你自己的gitbook目录中。 在自己的gitbook目录下，将_layouts/website/summary.html中的： GITBOOK_LINK 修改为： 以上内容由 www.lijiaocn.com 提供 4. 安装calibre插件 玩过kindle的都知道，calibre是一款非常方便的开源电子书转换软件。在这里，我们也是用到ebook-convert这个插件。 首先在calibre官网下载插件，下载链接：https://calibre-ebook.com/download。下载适合自己系统的版本。 下载到电脑之后我做了很多尝试，刚下载之后我兴冲冲的去使用gitbook pdf . mypdf.pdf指令，结果发现提示ebook-convert未安装。 配置 Calibre 环境变量 如何配置环境变量参考这里，在 .bash_profile 文件加入： Calibre export PATH=/Applications/calibre.app/Contents/MacOS:$PATH 更新刚配置的环境变量： $ source .bash_profile 查看所有的配置路径： $ echo $PATH 输出 PDF 文件 命令行： $ gitbook pdf 将在根目录下生成了 book.pdf 文件 \"include-codeblock\": { \"template\":\"./path/to/custom.hbs\", \"unindent\": true, \"theme\": \"monokai\", \"edit\": true }, \"-rss\",插件有问题 brew install yarn npm install -g browserify npm install uglify-js -g npm install less –g 或者 npm install -d less npm install node-sass sass-loader -D用node-sass 命令将scss转换为css ===>>> node-sass -wr scss -o css Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/commands.html":{"url":"book/gitbook/commands.html","title":"命令","keywords":"","body":"命令 这里主要介绍一下 GitBook 的命令行工具 gitbook-cli 的一些命令, 首先说明两点: gitbook-cli 和 gitbook 是两个软件 gitbook-cli 会将下载的 gitbook 的不同版本放到 ~/.gitbook中, 可以通过设置GITBOOK_DIR环境变量来指定另外的文件夹 列出gitbook所有的命令 gitbook help 输出gitbook-cli的帮助信息 gitbook --help 生成静态网页 gitbook build 生成静态网页并运行服务器 gitbook serve 生成时指定gitbook的版本, 本地没有会先下载 gitbook build --gitbook=2.0.1 列出本地所有的gitbook版本 gitbook ls 列出远程可用的gitbook版本 gitbook ls-remote 安装对应的gitbook版本 gitbook fetch 标签/版本号 更新到gitbook的最新版本 gitbook update 卸载对应的gitbook版本 gitbook uninstall 2.0.1 指定log的级别 gitbook build --log=debug 输出错误信息 gitbook builid --debug Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/create.html":{"url":"book/gitbook/create.html","title":"项目搭建","keywords":"","body":"项目搭建 一、Fork 示例项目 示例项目：https://github.com/zitiaocn/simple 二、项目结构 这里只罗列需要关注的部分，我们的初衷是先以最小的代价将项目跑起来再说，至于优化或进阶的功能后面再去摸索，讲的太多反倒容易让人觉得这个框架很复杂。 images 用于存放图片 README.md 关于文档，在 SUMMARY.md 进行配置 SUMMARY.md 文档目录 book.json 文档框架，最核心的文件 deploy.md 一个示例文档，可以删除 下面重点阐述几个文件： 1、SUMMARY.md 文档的目录结构，所有需要展示的文档都需要在它里面进行罗列。 详细 GitBook 官方英文文档：https://toolchain.gitbook.com/pages.html 注：GitBook 支持文件夹，但是文件夹的根目录下必须要指定文件，否则在前台的菜单中点击父级目录的时候无法展开。比如说有一个文档路径是：xxx.com/simple/create.html 那么 xxx.com/simple/ 必须要对应一个文件，在 SUMMARY.md 里面；否则点击 create.html 父级菜单将不会展开子菜单。 2、book.json 需要注意的参数有 root，就是文档内容的根目录，如果文档结构如下： -- book.json -- docs 就是文档全部放在这个目录下 ----doc1.md ----doc2.md 那么 book.json 中 root 的值应该是 ./docs。 head_title head_description head_keywords 上面三个参数在标准的 GitBook 框架里面没有，是我们自己改造的，就是页面 SEO 相关的 title、description、keywords。 还有一个参数需要留意 prefix，它是通过插件自动生成 sitemap.xml 网站地图的前缀路径，我们当前生成的地图为：http://zitiao.org/deploy/sitemap.xml 其它没有提及的参数保持原样，如果想要深入了解，请参考 GitBook 的官方英文文档：https://toolchain.gitbook.com/config.html 三、修改 book.js 文件 按照上面章节中 book.js 各个字段的含义进行修改，修改成适合自己项目的就可以了。 四、填充文档内容 1、SUMMARY.md 完成目录文档，可以参考本文档的 SUMMARY.md 文件的写法，比较简单，不展开了： https://github.com/zitiaocn/deploy/edit/master/SUMMARY.md 2、撰写具体文档内容 不懂 Git 也没关系，可以直接在 GitHub 的网页端在线编辑。 完成上面的所有工作，下一步就是 项目部署，请看下一章。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/gitbook-plug.html":{"url":"book/gitbook/gitbook-plug.html","title":"h1","keywords":"","body":"关闭页面特效 目录 配置概况 1.1. 全局配置 1.2. 插件列表 plugins 1.3. 插件属性配置pluginsConfig 一些实用插件 2.1. back-to-top-button 回到顶部 2.2. 导航目录折叠 2.2.1. chapter-fold 左侧目录折叠 2.2.2. expandable-chapters-small 左侧章节目录可折叠 2.2.3. expandable-chapters 可扩展导航章节 2.3. 代码复制，行号 2.3.1. code 代码添加行号&复制按钮（可选） 2.3.2. copy-code-button 代码块复制按钮 2.4. todo 待做项☑ 2.5. insert-logo 插入logo 2.6. search-pro 高级搜索（支持中文） 2.7. advanced-emoji 支持emoji表情 2.8. github 在右上角添加github图标 2.9. emphasize 为文字加上底色 2.10. splitter 侧边栏宽度可调节 2.11. sharing-plus 分享 2.12. 页脚、版权信息 2.12.1. tbfed-pagefooter 页面添加页脚（内容少） 2.12.2. page-copyright 页面页脚版权（内容多） 2.13. sectionx 将页面分块显示 2.14. 生成页内目录 2.14.1. page-treeview 生成页内目录 2.14.2. simple-page-toc 生成本页目录 2.15. 悬浮目录 2.15.1. page-toc-button 悬浮目录 2.15.2. ancre-navigation 悬浮目录和回到顶部 2.16. klipse 嵌入类似IDE的功能 2.17. donate 打赏插件 2.18. change_girls 可自动切换的背景 2.19. 警报 2.19.1. alerts 警报 2.19. flexible-alerts 警报 2.20. pageview-count 阅读量计数 2.21. auto-scroll-table 表格滚动条 2.22. 查看图片 2.22.1. popup 弹出大图 2.22. lightbox 单击查看图片 2.23. click-reveal 点击显示 2.24. custom-favicon 修改标题栏图标 2.25. accordion 折叠模块 2.26. hide-element 隐藏元素 介绍一下gitbook中book.json的一些实用配置和插件 title 设置书本的标题 \"title\" : \"Gitbook Use\" author 作者的相关信息 \"author\" : \"mingyue\" description 本书的简单描述 \"description\" : \"记录Gitbook的配置和一些插件的使用\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例如，配置使用简体中文 \"language\" : \"zh-hans\" links 在左侧导航栏添加链接信息 \"links\" : { \"sidebar\" : { \"Home\" : \"https://www.baidu.com\" } } styles 自定义页面样式， 默认情况下各generator对应的css文件 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如使 标签有下边框， 可以在website.css中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } 配置使用的插件 \"plugins\": [ \"-search\", \"back-to-top-button\", \"expandable-chapters-small\", \"insert-logo\" ] 其中\"-search\"中的 - 符号代表去除默认自带的插件 Gitbook默认自带有5个插件： highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 配置插件的属性 例如配置insert-logo的属性： \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } 记录一些实用的插件 用法：在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-插件名，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-back-to-top-button，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"back-to-top-button\" ] } 2.2.1. chapter-fold 左侧目录折叠 支持多层目录，点击导航栏的标题名就可以实现折叠扩展。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-chapter-fold，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"chapter-fold\"] } 2.2.2. expandable-chapters-small 左侧章节目录可折叠 支持多层目录，比Toggle Chapters好用 只有点击箭头才能实现折叠扩展。不如【2.2.1. chapter-fold 左侧目录折叠】好用 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-expandable-chapters-small，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"expandable-chapters-small\" ] } 2.2.3. expandable-chapters 可扩展导航章节 和expandable-chapters-small效果相同，唯一不同的是这个插件的箭头粗 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-expandable-chapters，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"expandable-chapters\" ] } 2.3.1. code 代码添加行号&复制按钮（可选） 为代码块添加行号和复制按钮，复制按钮可关闭 单行代码无行号。 插件地址 GitHub地址 在book.json中添加以下内容，然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-code，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\" : [ \"code\" ] } 如果想去掉复制按钮，在book.json的插件配置块更新： { \"plugins\" : [ \"code\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": false } } } 2.3.2. copy-code-button 代码块复制按钮 为代码块添加复制的按钮。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-copy-code-button，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"copy-code-button\"] } 效果如下图所示： 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-todo，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"todo\"] } 使用示例： [ ] write some articles [x] drink a cup of tea 将logo插入到导航栏上方中 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-insert-logo，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"insert-logo\" ], \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } } 支持中文搜索, 在使用此插件之前，需要将默认的search和lunr 插件去掉。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-search-pro { \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\" ] } emoij表情列表 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-advanced-emoji，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"advanced-emoji\" ] } 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-github，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } 效果图： 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-emphasize，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"emphasize\" ] } 然后在markdown / asciidoc内容中，使用以下内容突出显示一些文本： This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! 效果图： 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-splitter，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"splitter\" ] } 效果图： 分享当前页面，比默认的 sharing 插件多了一些分享方式。 插件地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-sharing-plus { \"plugins\": [\"-sharing\", \"sharing-plus\"], \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": true, \"linkedin\": true, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"douban\", \"facebook\", \"google\", \"hatenaBookmark\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"qq\", \"qzone\",\"viber\",\"vk\",\"weibo\", \"pocket\", \"stumbleupon\",\"whatsapp\" ] } } } 其中： 为true的代表直接显示在页面顶端，为false的不显示，不写默认为false \"all\"中代表点击分享符号显示出来的 支持网站： \"douban\", \"facebook\", \"google\", \"hatenaBookmark\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"qq\", \"qzone\",\"viber\",\"vk\",\"weibo\", \"pocket\", \"stumbleupon\",\"whatsapp\" 效果图： 如果想增加其他分享网站，可以自己修改插件文件button.js和package.json。 首先你要知道那个网站的分享链接的结构（可以随便找其他的网站点击分享看看URL），比如我增加分享到人人网,链接是这样的结构（红框里的是通用结构，后面内容是不同的。第一部分表示被分享的URL，第二部分是标题title）： 然后在button.js中的var SITES = {····}中添加一条信息，和上面其他分享的信息类似。比如我增加的人人网是这样的 在package.json中仿照前面内容添加新网站的信息。比如我添加的人人网： \"renren\": { \"default\": false, \"description\": \"人人网\", \"type\": \"boolean\" } 2.12.1. tbfed-pagefooter 页面添加页脚（内容少） 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-tbfed-pagefooter，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 如果想加入一个URL，自己可以去index.js里，把powered by gitbook，改成 powered by 你的名字 2.12.2. page-copyright 页面页脚版权（内容多） 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-page-copyright，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\" : [\"page-copyright\"], \"pluginsConfig\" : { \"page-copyright\": { \"description\": \"modified at\", \"signature\": \"你的签名\", \"wisdom\": \"Designer, Frontend Developer & overall web enthusiast\", \"format\": \"YYYY-MM-dd hh:mm:ss\", \"copyright\": \"Copyright © 你的名字\", \"timeColor\": \"#666\", \"copyrightColor\": \"#666\", \"utcOffset\": \"8\", \"style\": \"normal\", \"noPowered\": false, } } } 运行以后有很多信息是原创作者的，这些配置都在你的插件安装目录**\\node_modules\\gitbook-plugin-page-copyright下的index.js中，自己可以修改。大部分信息都在defaultOption中。 那个二维码可以在文件中找到QRcode改成自己的，或者直接把所有的efaultOption.isShowQRCode改成false 用于将页面分成多个部分，并添加按钮以允许读者控制每个部分的可见性 插件地址 GitHub地址 示例地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-sectionx，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"sectionx\" ] } 使用方法 内容分块： 在.md文件中定义一个部分（就是插入下面的字段）。 markdown中示例代码： 内容部分2； 效果图1： 这里只采用三个参数，其他参数如下所示： 参数 说明 data-title 该部分的标题，它将显示为bootstrap面板的标题（大小为h2）。 请注意，您不能使用\"标题中的字符，请\"改用。 data-id 章节的id，对按钮控制很有用（在下一节中讨论）。 data-show 默认表示面板内容是否可见的布尔值。 true：默认情况下，面板内容对用户可见，面板标题可以单击。 false：默认情况下，面板内容对用户隐藏，面板 标题不可点击，只能通过添加自定义按钮查看（在下一节中讨论）。 data-nopdf 一个布尔值，表示该部分是否将隐藏在pdf导出中。 true：面板不会显示在.pdf或.epub中。 data-collapse 一个布尔值，表示默认情况下是否打开（但仍然可见）该部分。 true：默认情况下，面板内容对用户可见，但已关闭。 false：默认情况下，面板内容对用户可见，但已打开（默认设置）。 添加按钮，控制部分可见性 通过在GitBook中添加内联HTML，以下代码可以添加一个按钮，以允许您查看或隐藏其他部分。 简单来说，就是在【使用1】的内容部分添加一个按钮： 标签说明： 标签 说明 class 该按钮必须属于类“section”。//这里就是用到 1部分的section target 当按下时，将切换id为target的部分。 show 隐藏目标部分时按钮上的文本。 hide 目标部分可见时按钮上的文本。 markdown中示例代码： 内容部分2 效果图2： 混合使用 将第2节的button块添加到第1节的内容部分 markdown中示例代码： 内容部分1； 内容部分2 效果图3： 2.14.1. page-treeview 生成页内目录 不需要插入标签，能支持到6级目录，安装可用 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-page-treeview，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [\"page-treeview\"] } 非必要的配置项： { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"Copyright © aleen42\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 偷偷地告诉你，这个插件生成目录以后，下面有一行关于版权的文字。如果想去掉的话，找到插件目录下的index.js文件：*/node_modules/gitbook-plugin-page-treeview/lib/index.js 找到大约111行，删除这一行关于var copyRight的定义 下面113行的var insertTreeview中，删除+ copyRight，目前就不显示了 142行中的'copyright': 'Copyright © aleen42',也可以删除 下面161行和163行和111行113行一样的，其实不删除也不显示了。 但是以后执行gitbook install就恢复了。 2.14.2. simple-page-toc 生成本页目录 需要插入标签，支持1-3级标签 页面顶端生成。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 GitHub地址 将以下插件插入到您的book.json并运行gitbook install： \"pluginsConfig\"不是必需的。 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 参数 说明 \"maxDepth\": 3 使用深度最多为maxdepth的标题。 \"skipFirstH1\": true 排除文件中的第一个h1级标题。 使用方法: 在需要生成目录的地方用下面的标签括起来，全文都生成的话就在首尾添加 h1 h2 h3 h2 内容部分 2.15.1. page-toc-button 悬浮目录 插件地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-ancre-navigation，也可以从源码GitHub地址中下载，放到node_modules文件夹里 { \"plugins\" : [ \"page-toc-button\" ] } 可选配置： { \"plugins\" : [ \"page-toc-button\" ], \"pluginsConfig\": { \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 } } } 名称 默认 描述 maxTocDepth 2 标题的最大深度（2 = h1 + h2 + h3）。不支持值> 2。 minTocSize 2 显示toc按钮的最小toc条目数。 2.15.2. ancre-navigation 悬浮目录和回到顶部 添加Toc到侧边悬浮导航以及回到顶部按钮。 自动在标题前生成列表项：\"1. \" \"1.1. \" \"2. \" \"2.2. \" 需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取 h1 h2 h3 必须要以 h1 开始，直接写 h2 不会被提取 h2 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-ancre-navigation，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [ \"ancre-navigation\" ] } 嵌入一块功能，可在代码段中实时交互，即（输入代码 > 执行结果 插件地址 GitHub地址 Klipse 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-klipse，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [\"klipse\"] } klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 下面是一个python的使用示例，其他语言类似，比如（eval-js）： print [x +1 for x in range（10）] 效果如下所示： 文章最下面的按钮，点击可弹出图片 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-donate，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"微信收款的二维码URL\", \"alipay\": \"支付宝收款的二维码URL\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } 添加背景图片，并且可以自动切换 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-change_girls，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\":[\"change_girls\"], \"pluginsConfig\": { \"change_girls\" : { \"time\" : 10, \"urls\" : [ \"girlUrl1\", \"girlUrl2\",...\"\" ] } } } 字段说明： time：图片的切换时间，单位是秒 urls： 一个数组，可以定义多个图片，只能使用互联网上的绝对地址 这两个警报插件类似，其中的图标文件有些可以共用 2.19.1. alerts 警报 这个GitBook插件将块引用转换为漂亮的警报。 插件地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-flexible-alerts { \"plugins\": [\"alerts\"] } 用法样式： 信息样式 [info] For info Use this for infomation messages. 警告造型 [warning] For warning Use this for warning messages. 危险造型 [danger] For danger Use this for danger messages. 成功造型 [success] For success Use this for success messages. 2.19. flexible-alerts 警报 这个GitBook插件将块引用转换为漂亮的警报。可以在全局和警报特定级别配置外观，因此输出确实符合您的需求（如下图）。此外，您还可以提供自己的警报类型（比如最后的comment）。 图 19 插件地址 GitHub地址 这个看上面那个链接里的内容更丰富一点 用法： 1) 在你的gitbook的book.json文件中，添加flexible-alerts到插件列表。 2) 在pluginsConfig中，配置插件以满足您的需求。自定义设置不是必需的。 简单使用 1.在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-flexible-alerts，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [ \"flexible-alerts\" ] } 2.markdown文件中编辑 简单的markdown文件写法，效果见上图 19 的第一个图： [!NOTE] 这是一个简单的Note类型的使用，所有的属性都是默认值。 上面的[!NOTE]是行匹配模式，默认情况下支持类型NOTE，TIP，WARNING和DANGER。 可以通过提供有效配置来扩展可用类型（请参阅这一节最下面的示例COMMENT） 个性化使用： 在markdown中的个性化语法 [!type|style:xx|label:xx|icon:xx|className:xx|labelVisibility:xx|iconVisibility:xx] 内容部分 字段介绍，如果不设置的表示选择默认，除了!type都不是必需 键 允许的值 说明 !type NOTE，TIP，WARNING和DANGER 警告级别设置 style 以下值之一: callout（默认）, flat 警告样式，见图19的左右不同 label 任何文字 警告块的标题位置，即Note这个字段位置（不支持中文） icon 比如： fa fa-info-circle 一个有效的Font Awesome图标，那块小符号 className CSS类的名称 指定css文件，用于指定外观 labelVisibility 以下值之一：visible（默认），hidden 标签是否可见 iconVisibility 以下值之一：visible（默认），hidden 图标是否可见 对比： [!NOTE] 这是一个简单的Note类型的使用，所有的属性都是默认值。 [!NOTE|style:flat|lable:Mylable|iconVisibility:hidden] \"!type\":NOTE、\"style\":flat、\"lable\":自定义标签、图标不可见 效果： json配置个性化 自定义一个COMMENT类型 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-flexible-alerts，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [ \"flexible-alerts\" ], \"pluginsConfig\": { \"flexible-alerts\": { \"style\": \"callout\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } } } } 示例： [!COMMENT] An alert of type 'comment' using style 'callout' with default settings. 效果： 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-pageview-count，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [ \"pageview-count\" ] } 为避免表格过宽，增加滚动条 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-auto-scroll-table，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [\"auto-scroll-table\"] } 没滚动条刷新一下页面 2.22.1. popup 弹出大图 单击图片，在新页面查看大图。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-lightbox，也可以从源码GitHub地址中下载，放到node_modules文件夹里 { \"plugins\": [ \"popup\" ] } 新窗口打开图片，大小不变 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-lightbox，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）： { \"plugins\": [\"lightbox\"] } 默认隐藏，点击可显示。 插件地址 GitHub地址 在book.json中添加以下内容，然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-click-reveal，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"click-reveal\" ] } 快速使用： 默认显示的文字是Click to show: Click to show 要被隐藏的内容 使用自定义显示文字： 点击显示 要被隐藏的内容 用HTML语法也可以： 点击显示 隐藏的文字 修改网页标题的图标 插件地址 GitHub地址 在book.json中添加以下内容，然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-custom-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\" : [\"custom-favicon\"], \"pluginsConfig\" : { \"favicon\": \"path/to/favicon.ico\" } } 把.ico格式的图标放进项目中。这个路径可以使用相对路径，比如我用的是./images/a.ico 注意：这个pluginsConfig和其他的不大一样。图标只能用.ico文件。 这个插件名叫手风琴，可以实现将内容隐藏起来，外部显示模块标题和显示箭头，点击箭头可显示里面的内容。 插件地址 GitHub地址 示例 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-custom-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里。 { \"plugins\": [\"accordion\"] } 用法： 编辑内容，用下面的标签括起来。 %accordion%模块标题%accordion% 内容部分 %/accordion% 可嵌套，内部可以加代码块，引用，标题等都可以实现。 可以隐藏不想看到的元素，比如导航栏中Published by GitBook 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-custom-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里。 { \"plugins\": [ \"hide-element\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [\".gitbook-link\"] } } } EOF 作　　者：明月 出　　处：https://www.cnblogs.com/mingyue5826/p/10307051.html 关于博主：编程路上的小学生，热爱技术，喜欢专研。评论和私信会在第一时间回复。或者直接私信我。 版权声明：署名 - 非商业性使用 - 禁止演绎，协议普通文本 | 协议法律文本。 声援博主：如果您觉得文章对您有帮助，可以点击文章右下角【推荐】一下。您的鼓励是博主的最大动力！ 作者：明月 出处：http://www.cnblogs.com/mingyue5826/ 如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，博主在此感谢！ 分类: GitBook 标签: gitbook 好文要顶 关注我 收藏该文 明月关注 - 2 粉丝 - 0 +加关注 1 0 « 上一篇：GiBbook实用配置以及插件 » 下一篇：关于opencv的cv2.WINDOW_一类 posted @ 2019-01-23 08:42 明月 阅读(1076) 评论(0) 编辑 收藏 刷新评论刷新页面返回顶部 注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。 GitBook插件整理 - book.json配置 Copyright ©2019 明月` 【人生若只如初见❤️何事秋风悲画扇】 This blog has running : 159 d 2 h 52 m 37 sღゝ◡╹)ノ♡ 友情链接：tengshe789/申请坑位/申请坑位/申请坑位/申请坑位 Theme Author：BNDong - Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/gitbookpei-zhi.html":{"url":"book/gitbook/gitbookpei-zhi.html","title":"gitbook","keywords":"","body":"gitbook 1、安装 1、npm install gitbook -g //安装命令 npm install -g gitbook-cli //卸载命令 npm uninstall -g gitbook cd x到项目文件夹下，执行 gitbook init gitbook ls gitbook ls-remote 列出远程可用的gitbook版本 gitbook update 更新到gitbook的最新版本 写文件 如果想要新增章节，可以在 SUMMARY.md 里面新增，然后执行 gitbook init 就会新增对应的 md 文件，原有文件不会变化；如果想要删除章节，在 SUMMARY.md 里面删除，然后执行 gitbook init 想要删除的 md 文件并不会删除，需要手动删除。 样式设置 1、配置book.json 安装插件 安装依赖gitbook install$ gitbook install ./ 预览 1、执行下面的命令 $ gitbook serve 然后浏览器中输入 http://localhost:4000 就可以预览生成的以网页形式组织的书籍。 debug 指定log的级别 gitbook build --log=debug 1 输出错误信息 gitbook builid --debug 编译 执行命令： gitbook build 1 运行该命令后会在根文件夹生成一个 _book 文件夹，包含了书籍的所有 html 文件. 可以使用该命令来生成网页而不开启服务器，也可以将_book文件夹部署到服务器上。 2、 生成静态网页时指定gitbook的版本，如果本地没有将先下载 gitbook build --gitbook=3.2.3 3、 $ mkdir /tmp/gitbook $ gitbook build --output=/tmp/gitbook Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:27:32 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:27:32 "},"book/gitbook/gulpfile.html":{"url":"book/gitbook/gulpfile.html","title":"gulpfile.md","keywords":"","body":"VS中使用Gulp 关于gulp资料可以访问:http://www.gulpjs.com.cn/，本篇主要讲解在VS中使用gulp对js和css进行压缩合并 1、下载node.js，gulp依赖于node.js，可以访问http://nodejs.cn/下载，本人下载的4.4.4版本，下载完后进行傻瓜式安装，注意安装路径最好不要含有空格或中文 2、安装gulp以及需要的插件 1、输入命令进行安装gulp npm install --global gulp 2、安装需要用到的插件，可以选择安装 npm install gulp-minify-css gulp-uglify gulp-concat gulp-rename gulp-notify 3、输入gulp -v，如果能出现版本号说明安装成功 3、新建Web项目，并在项目根目录下新建gulpfile.js，内容为： var gulp = require('gulp'),//载入gulp模块 less = require('gulp-less')；//载入需要用到的插件 //定义一个testLess任务（自定义任务名称） gulp.task('testLess', function () { gulp.src('less/*.less') //该任务针对的文件 .pipe(less()) //该任务调用的模块 .pipe(gulp.dest('css')); //将会在css下生成index.css }); //监听less文件 gulp.task('gulpWatch',function(){ gulp.watch('less/*.less',['testLess']); }); //同时让默认程序执行一次，可以提高开始执行速度。 最后在你的当前项目命令行中输入gulp执行即可。你会看到在相关的路径下生成对应的css文件。 但是,一般我们在公司,都不需要自己去配置这样一个文件,因为每次开发项目的时候都可以使用公司已经配置好的gulpfile.js文件, 把下面的代码拷贝到自己创建的gulpfile.js文件中即可使用: Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/installation.html":{"url":"book/gitbook/installation.html","title":"GitBook安装","keywords":"","body":"GitBook安装 下面介绍在本地如何安装 GitBook，如果不需要本地调试 & 不需要获得生成的 html 文件，可以直接使用 官网 提供的服务。 环境要求 通过NPM安装 编辑书籍 预览书籍 环境要求 NodeJS(v4.0.0及以上) 通过NPM安装 运行下面的命令进行安装 npm install gitbook-cli -g 其中gitbook-cli是gitbook的一个命令行工具, 通过它可以在电脑上安装和管理gitbook的多个版本. 编辑书籍 gitbook 官方已经提供了一个本地的编辑器, 使用它可以方便的编写书籍(不需要手动的写SUMMARY.md), 并且支持windows、mac、linux 三种平台, 所以强烈建议使用编辑器编写书籍. 预览书籍 使用下列命令会运行一个服务器, 通过http://localhost:4000/可以预览书籍 gitbook serve 运行该命令后会在书籍的文件夹中生成一个 _book 文件夹, 里面的内容即为生成的 html 文件. 我们可以使用下面命令来生成网页而不开启服务器 gitbook build Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/introduction.html":{"url":"book/gitbook/introduction.html","title":"前言","keywords":"","body":"前言 主要记录GitBook的安装配置以及一些插件信息, 下面是GitBook的一些资源 GitBook主页 Github地址 GitBook编辑器 GitBook Toolchain Documentation GitBook Documentation 如若转载请标明出处. Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/plugins.html":{"url":"book/gitbook/plugins.html","title":"GitBook 插件","keywords":"","body":"GitBook 插件 记录一些实用的插件, 如果要指定插件的版本可以使用 plugin@0.3.1。下面的插件在 GitBook 的 3.2.3 版本中可以正常工作，因为一些插件可能不会随着 GitBook 版本的升级而升级，即下面的插件可能不适用高版本的 GitBook，所以这里指定了 GitBook 的版本。另外本文记录的插件在 Linux 下都是可以正确工作的，windows 系统没有测试。这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 区搜索相关插件。 Disqus - Disqus 评论 Search Plus - 支持中文搜索 Prsim - 使用 Prism.js 高亮代码 Advanced Emoji - 支持 emoji 表情 Github - 添加github图标 Github Buttons - 添加项目在 Github 上的 star、fork、watch 信息 Ace Plugin - 支持ace Emphasize - 为文字加上底色 KaTex - 支持数学公式 Include Codeblock - 用代码块显示包含文件的内容 Splitter - 使侧边栏的宽度可以自由调节 Mermaid-gb3 - 支持渲染 Mermaid 图表 Puml - 支持渲染 uml 图 Graph - 使用 function-plot 绘制数学函数图 Chart - 绘制图形 Sharing-plus - 分享当前页面 Tbfed-pagefooter - 为页面添加页脚 Expandable-chapters-small - 使左侧的章节目录可以折叠 Toggle-chapters - 左侧章节目录可以折叠 Sectionx - 将页面分块显示 GA - Google 统计 3-ba - 百度统计 Donate - 打赏插件 Local Video - 使用 Video.js 播放本地视频 Simple-page-toc - 自动生成本页的目录结构 Anchors - 添加 Github 风格的锚点 Anchor-navigation-ex - 添加Toc到侧边悬浮导航以及回到顶部按钮 Edit Link - 链接到当前页源文件上 Sitemap-general - 生成sitemap Favicon - 更改网站的 favicon.ico Todo - 添加 Todo 功能 Terminal - 模拟终端样式 Copy-code-button - 为代码块添加复制按钮 Alerts - 添加不同 alerts 样式的 blockquotes Include-csv - 显示 csv 文件内容 Musicxml - 支持 musicxml 格式的乐谱渲染 Klipse - 集成 Kplise (online code evaluator) Versions-select - 添加版本选择的下拉菜单 Rss - 添加 rss 订阅功能 Theme-comscore - 修改标题和表格颜色 summary - 自动生成目录 Disqus 添加disqus评论 插件地址 \"plugins\": [ \"disqus\" ], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"gitbookuse\" } } Search Plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 插件地址 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } Prism 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式，具体的样式可以参考 这里，在设置样式时要注意设置 css 文件名，而不是样式名。 Prism 插件地址    prism-themes 插件地址 { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } Advanced Emoji 支持emoji表情 emoij表情列表插件地址 \"plugins\": [ \"advanced-emoji\" ] 使用示例： Github 添加github图标 插件地址 \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } Github Buttons 添加项目在 github 上的 star，watch，fork情况 插件地址 { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": { \"repo\": \"zhangjikai/gitbook-use\", \"types\": [ \"star\", \"watch\", \"fork\" ], \"size\": \"small\" } } } Ace Plugin 插件地址 使 GitBook 支持ace 。默认情况下，line-height 为 1，会使代码显得比较挤，而作者好像没提供修改行高的选项，如果需要修改行高，可以到 node_modules -> github-plugin-ace -> assets -> ace.js 中加入下面两行代码 (30 行左右的位置)： editor.container.style.lineHeight = 1.25; editor.renderer.updateFontSize(); 不过上面的做法有个问题就是，每次使用 gitbook install 安装新的插件之后，代码又会重置为原来的样子。另外可以在 website.css 中加入下面的 css 代码来指定 ace 字体的大小 .aceCode { font-size: 14px !important; } 使用插件： \"plugins\": [ \"ace\" ] 使用示例: // This is a hello world program for C. #include int main(){ printf(\"Hello World!\"); return 1; } Emphasize 为文字加上底色 插件地址 \"plugins\": [ \"emphasize\" ] 使用示例: This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! KaTex 为了支持数学公式, 我们可以使用KaTex和MathJax插件, 官网上说Katex速度要快于MathJax 插件地址MathJax使用LaTeX语法编写数学公式教程 Include Codeblock 使用代码块的格式显示所包含文件的内容. 该文件必须存在。插件提供了一些配置，可以区插件官网查看。如果同时使用 ace 和本插件，本插件要在 ace 插件前面加载。 插件地址 { \"plugins\": [ \"include-codeblock\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } 使用示例: Error: file not found: /private/var/www/clark-xm.xyz/Gitbook_store/Import/BlackTechBook/book/gitbook/styles/website.css Splitter 使侧边栏的宽度可以自由调节 插件地址 \"plugins\": [ \"splitter\" ] Mermaid-gb3 支持渲染Mermaid图表插件地址 \"plugins\": [ \"mermaid-gb3\" ] 使用示例: graph TD; A-->B; A-->C; B-->D; C-->D; Puml 使用 PlantUML 展示 uml 图。 插件地址PlantUML 地址 { \"plugins\": [\"puml\"] } 使用示例： {% plantuml %} Class Stage Class Timeout { +constructor:function(cfg) +timeout:function(ctx) +overdue:function(ctx) +stage: Stage } Stage Graph 使用 function-plot 绘制数学函数图。 插件地址function-plot { \"plugins\": [ \"graph\" ], } 下面是一个示例，需要注意的是 {% graph %} 块中的内容必须是合法的 JSON 格式。 {% graph %} { \"title\": \"1/x * cos(1/x)\", \"grid\": true, \"xAxis\": { \"domain\": [0.01, 1] }, \"yAxis\": { \"domain\": [-100, 100] }, \"data\": [{ \"fn\": \"1/x * cos(1/x)\", \"closed\": true }] } {% endgraph %} Chart 使用 C3.js 或者 Highcharts 绘制图形。 插件地址C3.jshighcharts { \"plugins\": [ \"chart\" ], \"pluginsConfig\": { \"chart\": { \"type\": \"c3\" } } } type 可以是 c3 或者 highcharts, 默认是 c3. 下面是一个示例： {% chart %} { \"data\": { \"type\": \"bar\", \"columns\": [ [\"data1\", 30, 200, 100, 400, 150, 250], [\"data2\", 50, 20, 10, 40, 15, 25] ], \"axes\": { \"data2\": \"y2\" } }, \"axis\": { \"y2\": { \"show\": true } } } {% endchart %} ## Sharing-plus 分享当前页面，比默认的 sharing 插件多了一些分享方式。 [插件地址](https://plugins.gitbook.com/plugin/sharing-plus) ```json plugins: [\"-sharing\", \"sharing-plus\"] 配置: \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": true, \"linkedin\": true, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\", \"linkedin\", \"pocket\", \"stumbleupon\" ] } } Tbfed-pagefooter 为页面添加页脚 插件地址 \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } Expandable-chapters-small 使左侧的章节目录可以折叠 插件地址 plugins: [\"expandable-chapters-small\"] Toggle-chapters 使左侧的章节目录可以折叠。相比expandable-chapters， 没有折叠箭头符号，并且当前只有一项可以展开。参考：https://blog.csdn.net/lintcgirl/article/details/54314113 插件地址 plugins: [\"toggle-chapters\"] Sectionx 将页面分块显示，标签的 tag 最好是使用 b 标签，如果使用 h1-h6 可能会和其他插件冲突。插件地址 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } 使用示例 Insert markdown content here (you should start with h3 if you use heading). GA Google 统计插件地址 \"plugins\": [ \"ga\" ], \"pluginsConfig\": { \"ga\": { \"token\": \"UA-XXXX-Y\" } } 3-ba 百度统计插件地址 { \"plugins\": [\"3-ba\"], \"pluginsConfig\": { \"3-ba\": { \"token\": \"xxxxxxxx\" } } } Donate 打赏插件插件地址 \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"https://zhangjikai.com/resource/weixin.png\", \"alipay\": \"https://zhangjikai.com/resource/alipay.png\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } Local Video 使用Video.js 播放本地视频插件地址 \"plugins\": [ \"local-video\" ] 使用示例：为了使视频可以自适应，我们指定视频的width为100%，并设置宽高比为16:9，如下面所示 {% raw %} To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video {% endraw %} 另外我们还要再配置下css，即在website.css中加入 .video-js { width:100%; height: 100%; } To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video Simple-page-toc 自动生成本页的目录结构。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 使用方法: 在需要生成目录的地方加上 Anchors 添加 Github 风格的锚点样式 插件地址 \"plugins\" : [ \"anchors\" ] Anchor-navigation-ex 添加Toc到侧边悬浮导航以及回到顶部按钮。需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取# h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 插件地址 { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } Edit Link 如果将 GitBook 的源文件保存到github或者其他的仓库上，使用该插件可以链接到当前页的源文件上。插件地址 \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } Sitemap-general 生成sitemap插件地址 { \"plugins\": [\"sitemap-general\"], \"pluginsConfig\": { \"sitemap-general\": { \"prefix\": \"http://gitbook.zhangjikai.com\" } } } Favicon 更改网站的 favicon.ico插件地址 { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } Todo 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 \"plugins\": [\"todo\"] 使用示例： [ ] write some articles [x] drink a cup of tea Terminal 模拟终端显示，主要用于显示命令以及多行输出，不过写起来有些麻烦。 插件地址 { \"plugins\": [ \"terminal\" ], \"pluginsConfig\": { \"terminal\": { \"copyButtons\": true, \"fade\": false, \"style\": \"flat\" } } } 现在支持 6 种标签： command: Command \"executed\" in the terminal. delimiter: Sequence of characters between the prompt and the command. error: Error message. path: Directory path shown in the prompt. prompt: Prompt of the user. warning: Warning message. 标签的使用格式如下所示： **[ 内容] 为了使标签正常工作，需要在代码块的第一行加入 **[termial] 标记，下面是一个完整的示例： ``` **[terminal] **[prompt foo@joe]**[path ~]**[delimiter $ ]**[command ./myscript] Normal output line. Nothing special here... But... You can add some colors. What about a warning message? **[warning [WARNING] The color depends on the theme. Could look normal too] What about an error message? **[error [ERROR] This is not the error you are looking for] ``` terminal 支持下面 5 种样式，如果需要更换样式，在 pluginsConfig 里配置即可。 black: Just that good old black terminal everybody loves. classic: Looking for green color font over a black background? This is for you. flat: Oh, flat colors. I love flat colors. Everything looks modern with them. ubuntu: Admit it or not, but Ubuntu have a good looking terminal. white: Make your terminal to blend in with your GitBook. Copy-code-button 为代码块添加复制的按钮。 插件地址 { \"plugins\": [\"copy-code-button\"] } 效果如下图所示： Alerts 添加不同 alerts 样式的 blockquotes，目前包含 info, warning, danger 和 success 四种样式。 插件地址 { \"plugins\": [\"alerts\"] } 下面是使用示例： Info styling > **[info] For info** > > Use this for infomation messages. Warning styling > **[warning] For warning** > > Use this for warning messages. Danger styling > **[danger] For danger** > > Use this for danger messages. Success styling > **[success] For info** > > Use this for success messages. Include-csv 展示 csv 文件。 插件地址 { \"plugins\": [\"include-csv\"] } 使用示例： {% includeCsv src=\"./assets/csv/test.csv\", useHeader=\"true\" %} {% endincludeCsv %} Musicxml 支持 musicxml 格式的乐谱渲染。 插件地址musicXML { \"plugins\": [\"musicxml\"] } 下面是一个示例，需要注意的是 block 中的内容必须是一个合法的 musicxml 文件路径，并且不能有换行和空格。 {% musicxml %}assets/musicxml/mandoline - debussy.xml{% endmusicxml %} Klipse 集成 Klipse (online code evaluator) 插件地址Klipse { \"plugins\": [\"klipse\"] } klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 下面是一个使用示例： ```eval-python print [x + 1 for x in range(10)] ``` Versions-select 添加版本选择的下拉菜单，针对文档有多个版本的情况。 插件地址 { \"plugins\": [ \"versions-select\" ], \"pluginsConfig\": { \"versions\": { \"options\": [ { \"value\": \"http://gitbook.zhangjikai.com\", \"text\": \"v3.2.2\" }, { \"value\": \"http://gitbook.zhangjikai.com/v2/\", \"text\": \"v2.6.4\" } ] } } } 我们可以自定义 css 来修改 select 的显示样式： .versions-select select { height: 2em; line-height: 2em; border-radius: 4px; background: #efefef; } 效果见左上角。 RSS 添加 rss 订阅功能。 插件地址 { \"plugins\": [ \"rss\" ], \"pluginsConfig\": { \"rss\": { \"title\": \"GitBook 使用教程\", \"description\": \"记录 GitBook 的配置和一些插件的使用\", \"author\": \"Jikai Zhang\", \"feed_url\": \"http://gitbook.zhangjikai.com/rss\", \"site_url\": \"http://gitbook.zhangjikai.com/\", \"managingEditor\": \"me@zhangjikai.com\", \"webMaster\": \"me@zhangjikai.com\", \"categories\": [ \"gitbook\" ] } } } 效果见右上角。 theme-comscore 主题插件, 修改标题和表格颜色。默认标题都是黑色的。 插件地址 { \"plugins\": [ \"theme-comscore\" ] } summary 根据文件自动生成目录。 插件地址 { \"plugins\": [ \"summary\" ] } 规则： 每个新增的目录中加入README.md，否则菜单为不可折叠 同个目录下的文件采用自然排序来决定菜单生成的前后顺序， 故在文件或目录前加入 \"数字-\" 如 \"0-\" 或 \"1-\" 来排序菜单的前后顺序。 菜单由目录自动生成，菜单名称依赖md文件中的标题， 故每个md文件中必须添加标题, 否则无法生成目录。 示例： 我们假设您的源代码树是这样完成的： $ tree . . ├── 1-Getting Started │ ├── 0-README.md │ └── 1-TEST.md ├── 2-Reference │ └── 0-README.md ├── README.md └── SUMMARY.md 生成的SUMMARY.md文件将如下所示： - [Getting Started](1-Getting Started/0-README.md) - [Test](1-Getting Started/1-TEST.md) - [Reference](2-Reference/0-README.md) Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 21:15:23 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 21:15:23 "},"book/gitbook/run.html":{"url":"book/gitbook/run.html","title":"运行部署","keywords":"","body":"运行部署 一、将项目拉到服务器 进入到服务器对应目录（本地电脑和远程服务器都可以，我拿我的本地 mac 电脑来演示），并将代码克隆下来，我将项目克隆到我的 wwwroot 目录： vincent4j-mac:wwwroot vincent4j$ git clone git@github.com:zitiaocn/deploy.git 自动打出下面的文字，代表克隆代码成功： Cloning into 'deploy'... remote: Counting objects: 40, done. remote: Compressing objects: 100% (26/26), done. remote: Total 40 (delta 6), reused 36 (delta 5), pack-reused 0 Receiving objects: 100% (40/40), 23.04 KiB | 0 bytes/s, done. Resolving deltas: 100% (6/6), done. Checking connectivity... done. 二、安装环境 1、进入到项目目录 vincent4j-mac:wwwroot vincent4j$ cd deploy vincent4j-mac:deploy vincent4j$ 2、安装依赖环境 npm install gitbook-cli -g 执行完之后，再执行： npm install 上面两个命令执行的时间会比较长，请耐心等待，在这期间会将 Node.js 环境也一并安装。 3、安装 GitBook 模块 gitbook install 会安装所需的所有插件，当自动打印如下文字，代表安装成功： info: >> plugin \"sitemap-general\" installed with success 4、编译文件 依次执行下面三行命令： gitbook build 编译文件，编译后生成的静态文件会放置在 _book 目录。 rm -rf _book_cache cp -r _book _book_cache cp -r _book publish 将编译的文件从 _book 复制到 _book_cache，最终网站运行时是读取 _book_cache 目录下的文件。 5、运行 gitbook serve 当自动打印出如下文字，就代码运行成功： Starting server ... Serving book on http://localhost:4000 在浏览器里访问 http://localhost:4000 就能看到文档了，就可以 乐开怀 咯。 三、注意事项 http://zitiao.org/deploy/ 参考文档 同一台服务器部署多个项目时，只需要安装一次 安装依赖环境。 以下有几种解决方案： 运行gitbook serve . 这个命令在用户退出终端时也会结束。为保持其后台运行须修改为setsid,nohup命令（setsid gitbook serve .）不行 nohup gitbook serve & linux后台运行命令的几种办法https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/index.html [1] 92121 appending output to nohup.out PM2(github.com/Unitech/pm2) Forever (npmjs.org/package/for…) Supervisor (supervisord.org/) Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/settings.html":{"url":"book/gitbook/settings.html","title":"GitBook配置","keywords":"","body":"GitBook配置 记录Gitbook的一些配置信息 title - 标题 author - 作者信息 description - 书本描述 language - 使用的语言 gitbook - 指定gitbook版本 root - 指定存放 GitBook 文件的根目录 links - 在侧边栏添加链接 styles - 自定义样式 plugins - 插件 pluginsConfig - 插件配置 structure - 设置 Readme, Summary, Glossary等对应的文件 title 设置书本的标题 \"title\" : \"Gitbook Use\" author 作者的相关信息 \"author\" : \"zhangjikai\" description 本书的简单描述 \"description\" : \"记录Gitbook的配置和一些插件的使用\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 配置使用简体中文 \"language\" : \"zh-hans\", gitbook 指定使用的gitbook版本 \"gitbook\" : \"3.2.2\", \"gitbook\" : \">=3.0.0\" root 指定存放 GitBook 文件（除了 book.json）的根目录 \"root\": \".\" links 在左侧导航栏添加链接信息 \"links\" : { \"sidebar\" : { \"Home\" : \"http://zhangjikai.com\" } } styles 自定义页面样式， 默认情况下各generator对应的css文件 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如使 标签有下边框， 可以在website.css中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } plugins 配置使用的插件 \"plugins\": [ \"disqus\" ] 添加新插件之后需要运行gitbook install来安装新的插件 Gitbook默认带有5个插件： highlight search sharing font-settings livereload 如果要去除自带的插件， 可以在插件名称前面加- \"plugins\": [ \"-search\" ] pluginsConfig 配置插件的属性 \"pluginsConfig\": { \"fontsettings\": { \"theme\": \"sepia\", \"family\": \"serif\", \"size\": 1 } } structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名，下面是这几个文件对应变量以及默认值： 变量 含义和默认值 structure.readme Readme file name (defaults to README.md) structure.summary Summary file name (defaults to SUMMARY.md) structure.glossary Glossary file name (defaults to GLOSSARY.md) structure.languages Languages file name (defaults to LANGS.md) Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/structure.html":{"url":"book/gitbook/structure.html","title":"目录结构","keywords":"","body":"目录结构 GitBook 基本的目录结构如下所示 . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md 这里主要讲下 GitBook 预定义的几个文件的作用 book.json 存放配置信息，在下一章中所讲的配置信息都是在这个文件里定义的，关于该文件的配置可以看 配置 这个章节。 Summary 概要文件主要存放 GitBook 的文件目录信息，左侧的目录就是根据这个文件来生成的，默认对应的文件是 SUMMARY.md，可以在 book.json 重新定义该文件的对应值。它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例： # Summary * [Introduction](README.md) * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 这个配置对应的目录结构如下所示: 我们通过使用 标题 或者 水平分割线 标志将 GitBook 分为几个不同的部分 # Summary ### Part I * [Introduction](README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) 这个配置对应的目录结构如下所示： Glossary 词汇表文件，默认对应的文件是 GLOSSARY.md。该文件主要存储词汇信息，如果在其他页面中出现了该文件中的词汇，鼠标放到词汇上会给出词汇示意，可以将鼠标移到下面两个词汇上看下效果。 Git    Markdown Glossary 文件的格式如下所示： ## Git 分散式版本控制软件 ## Markdown Aaron Swartz 跟John Gruber共同设计的排版语言 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/test.html":{"url":"book/gitbook/test.html","title":"项目介绍","keywords":"","body":"项目介绍 https://www.jianshu.com/p/f81a2509ca89 思路：通过将 Wiki 文档内容的仓库托管在 GitHub 之上，并且将 GitBook 框架的代码放在仓库中 ，然后找一台有 Node.js 环境的服务器，通过简单的几行命令就能部署成功，十分钟内能搞定。从而具备多人协作、版本控制、Markdown 写作、代码高亮、实时更新的特性。 一、效果展示 1、Material Design 中文版（有侧边栏菜单） 页面效果：http://zitiao.org/material-design/ 文档仓库：https://github.com/zitiaocn/material-design 2、GitBook Help Center（无侧边栏菜单） 页面效果：https://help.gitbook.com/ 文档仓库：https://github.com/GitbookIO/help.gitbook.com 二、功能特性 1、页面美观 主要体现在两个方面：其一，页面的外观，请回头看看上面的效果图。其二，链接的格式，如下： GitBook 链接示例：http://zitiao.org/material-design/usability/accessibility.html MDwiki 链接示例：http://dynalon.github.io/mdwiki/#!layout.md （我个人见不得 #、! 之类的字符） 2、多人协作 & 版本控制 文档内容托管于 GitHub 之上，GitHub 本身就具备 多人协作 和 版本控制 的功能。当然所有的 Git 托管平台都可以，比如说国外的 GitLab、Bitbucket，或者国内的 git.oschina.net、coding.net 都行。 如果希望仓库私有，国外产品推荐 Bitbucket，因为他私有仓库免费，而 GitHub 私有仓库收费。国内的好像私有仓库都免费，在安全性和稳定性方面可能不如 Bitbucket。 3、Markdown 写作 文档内容托管于 GitHub 之上，GitHub 本身就具备 Markdown 写作 的功能。 4、代码高亮 通过 GitBook 的插件能很容易支持代码高亮（这就是站在巨人的肩膀上的好处）。 5、实时更新 通过给 GitHub 仓库配置 webhook 进行 push 时的消息推送，能触发服务器实时更新（服务器上需要些代码）。 6、一键部署 只需要简单的几行命令就部署完毕。 三、所需资源 唯一的一个条件就是，一台支持 Node.js 的服务器（公网和内网服务器都行）。 四、交流学习 欢迎加群详聊 如果扫码加群不成功，请添加四勾的个人微信，再由四勾邀请入群，加好友时请填写验证信息「字条网加群」 添加 四勾 4J 个人微信 vincent4j。 via http://4jplus.com Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/themes.html":{"url":"book/gitbook/themes.html","title":"主题","keywords":"","body":"主题 目前 GitBook 提供了三类文档： Book 文档、API文档、FAQ文档。我们常用的就是 Book 文档模式，如果我们需要使用 API 文档模式或者 FAQ 文档模式，只需引入文档对应的主题插件即可，下面我们介绍与这三类文档相关的主题插件。 Book theme-default theme-comscore API 文档 FAQ 文档 Book Book 是我们常用的模式，大部分插件也都是针对这个模式做的。下面介绍一下针对 Book 模式的两个主题。 theme-default theme-default 是默认的 Book 主题。将 showLevel 设为 true， 就可以显示标题前面的数字索引，默认不显示。 { \"theme-default\": { \"showLevel\": true } } 在使用该主题的过程中，发现经常会在控制台报下面的错误，没有找到是哪里的原因，官方也一直没有修复。 theme.js:4 Uncaught TypeError: Cannot read property 'split' of undefined 后来在 这里 看到一个解决方法，需要修改本地的 GitBook Theme 模板。下面是具体步骤： 进入 GitBook 默认主题所在的文件夹 用户主目录 -> .gitbook -> versions -> 3.2.2 -> node_modules -> gitbook-plugin-theme-default -> src -> js -> theme，打开 navigation.js，找到 getChapterHash 函数 function getChapterHash($chapter) { var $link = $chapter.children('a'), hash = $link.attr('href').split('#')[1]; if (hash) hash = '#'+hash; return (!!hash)? hash : ''; } 将该函数修改为下面的形式: function getChapterHash($chapter) { var $link = $chapter.children('a'), hash, href, parts; if ($link.length) { href = $link.attr('href') if (href) { parts = href.split('#'); if (parts.length>1) { hash = parts[1]; } } } if (hash) hash = '#'+hash; return (!!hash)? hash : ''; } 回到 gitbook-plugin-theme-default 文件夹，运行 npm install 重新编译文件。 另外在 v3 版本中引入了 part 的概念 (通过标题或者水平分割线将 GitBook 分为几个 part)，所以目录的索引格式为 part-index + article-index。但是很多时候我们可能只有一个 part，并且不希望添加 part-index，即 1.1, 1.2 -> 1, 2。官方说是会在 v4 版本中解决这个问题，如果 v3 版本中希望去掉前面的 part-index，需要我们手动修改 gitbook 的源文件，下面是修改方法： 打开 /.gitbook/versions/3.x.x/lib/models/summaryPart.js 修改第 51 行的内容： // return SummaryArticle.create(article, [level, i + 1].join('.')); return SummaryArticle.create(article, (i + 1) + ''); 这样修改之后会有个问题，即每个 part 都会从 1 开始计数，如下图所示： 对于这个问题，目前的解决方法就是使用不同版本的 GitBook，对 3.2.2 进行了修改， 3.2.3 没有修改，当只有一个 part 的时候使用 3.2.2 的版本，多个 part 的时候使用 3.2.3 的版本。 theme-comscore 为标题添加颜色，如下如所示 插件地址 { \"plugins\": [ \"theme-comscore\" ] } API 文档 GitBook 同样可以编写 API 文档，只需要引入 theme-api 插件 { \"plugins\": [\"theme-api\"], \"pluginsConfig\": { \"theme-api\": { \"theme\": \"dark\" } } } 引入之后会替换默认的样式。下面是 API 文档的样式截图和在线演示： 在线演示    示例源码 使用 GitBook 的 API 文档模式时也可以使用插件，但是因为大部分插件可能针对写书的模式，所以有可能会出现不兼容的现象。 API文档的语法也很简单，因为主要是针对方法的，所以以方法为基本单位，通过下面的语法来定义一个方法 {% method %} 内容区 {% endmethod %} 在内容区里面，通过 {% sample lang=\"lang\" %}来定义一个针对特定语言的演示，通过 {% common %} 标识所有语言共同的部分。可以在 这里 查看完整的示例。 FAQ 文档 theme-faq 插件主要用来制作知识库或者帮助中心，GitBook 的 帮助中心 就是使用的该主题。为了支持中文搜索我们需要引入 search-pro 包。 { \"plugins\": [ \"theme-faq\", \"-lunr\", \"search-pro@^2.0.2\" ] } 下面是该主题的截图以及在线示例： 在线演示    示例源码 编写帮助中心很简单，在 Summary 里配置问题以及答案所在的文件，在对应文件中写入问题的答案即可，下面是一个示例SUMMARY.md # Summary * [什么 is Git](Git.md) * [什么 is Github](Github.md) Git.md Git 是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools[6]（一个类似Norton Commander界面的文件管理器）有所不同。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/update.html":{"url":"book/gitbook/update.html","title":"更新文档","keywords":"","body":"更新文档 一、手动更新 进入到项目路径，依次运行下面的命令： git pull 拉取最新的项目文件 gitbook build 编译文件，编译后生成的静态文件会放置在 _book 目录。 rm -rf _book_cache cp -r _book _book_cache 将编译的文件从 _book 复制到 _book_cache，最终网站运行时是读取 _book_cache 目录下的文件。 二、自动更新 1、在 GitHub 仓库中配置 webhook 2、在服务器上通过程序来接收事件 当代码有提交的时候，GitHub 会往上面的地址推送消息，服务器接收到消息之后，执行 手动更新 里的脚本就可以了。 具体的代码如何实现，就交给公司的研发人员了，我们就不在此细说，因为我也不懂代码，惭愧。 三、注意事项 如果在更新的时候 book.js 发生了变更，需要执行 gitbook install。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/gitbook/使用教程.html":{"url":"book/gitbook/使用教程.html","title":"gitbook - 新的文档书写方式","keywords":"","body":"gitbook - 新的文档书写方式 September 01, 2015 介绍 gitbook安装 安装依赖环境 gitbook安装 图书格式 多语言 词汇表 忽略文件和文件夹 封面 发布图书 插件 介绍 A modern publishing toolchain. Simply taking you from ideas to finished, polished books. 这是gitbook官网上的介绍。 gitbook是一种新型的写作方式，基于markdown标记式语言，集成了git优秀的版本管理，轻松写作（and协作），随时发布到线上，可以免费供人查阅，也可以公开出版（赚钱ﾉ( ´ ▽ ` )ﾉ）。gitbook开源(node.js库)，可以安装到自己本地生成静态站点，发布到自己的服务器（做在线文档、API），也可以通过插件生成PDF,ePub等格式（目前中文字体支持不太好）。而且插件丰富，可扩展性强，可以用它实现各种文档需求。 新版的gitbook不仅支持写作、发布、出版、数据分析、实时更新等功能，还雄心勃勃的启动与 amazon kindel ，苹果商店、google play、kobo等平台的对接。 editor 新版是官方提供的图形化编辑工具，新版editor集成了git版本管理，文件管理，目录导航视图等新功能，提供Windows, Mac 和Linux的版本。 前段时间公司需要为后端开发人员提供一个方便书写和管理的文档中心，要求：不用前端页面和代码，书写简单，文字排版优美，方便多人协作、维护，同时具备版本管理、轻松发布。正好这事由我负责，在网上查了一通，最后找到了gitbook这个接近完美的解决方案。 gitbook安装 安装依赖环境 gitbook 依赖 nodejs 和 npm MAC / WINDOWS： 可以直接在nodejs官网下载安装包安装。https://nodejs.org/download/ ubuntu ： 安装nodejsUbuntu 14.04自带的Node.js版本太老，且我试了下安装并不成功，所以需要添加Node.js PPA安装最新版的Node.js，在终端中执行： add-apt-repository ppa:chris-lea/node.js sudo apt-get update sudo apt-get install nodejs 安装npm sudo apt-get install npm 查看安装结果 node -v or nodejs -v gitbook安装 1.使用npm安装gitbook $ npm install gitbook-cli -g 2.初始化gitbook，如果含有SUMMARY.md文件的话，gitbook会以此文件为目录初始化。 $ gitbook init 3.启动服务（在本地启动一个服务器，生成gitbook网页，可以通过浏览器访问） $ gitbook serve 4.或者直接生成静态文件（站点） $ gitbook build GitBook 会从仓库中的book.json文件加载默认的配置，前提是此文件存在. 图书格式 一本图书就是一个Git仓库，至少包含两个文件: README.md 和 SUMMARY.md. README.md 典型的, 它应该是你的图书的介绍. 它可以自动的被加到书籍的summary中. SUMMARY.md SUMMARY.md 定义了你的图书的结构. 它应该包含章节的列表,以及它们的链接. 例如:Summary This is the summary of my book. * [第一章](section1/README.md) * [第一节](section1/example1.md) * [第二节](section1/example2.md) * [第二章](section2/README.md) * [第一节](section2/example1.md) 不被SUMMARY.md包含的文件不会被gitbook处理. 括号里面是章节的文件目录，比如section1/example1.md，就是指向(图书根目录下)section1文件夹里的example1.md文件。 多语言 GitBook 支持使用多种语言编写图书. 每种语言应该是一个子目录， 遵循正常gitbook格式, LANGS.md文件应该被放到repository的根文件夹， 格式如下: * [English](en/) * [French](fr/) * [Español](es/) 词汇表 允许你列出条目以及它们的定义. 基于这些条目 gitbook会自动创建一个索引，并在页面中加亮这些条目. GLOSSARY.md 格式很简单 : # term Definition for this term # Another term With it's definition, this can contain bold text and all other kinds of inline markup ... 忽略文件和文件夹 GitBook 读取.gitignore, .bookignore 和 .ignore 得到需要忽略的文件/文件夹的列表. (文件的格式和 .gitignore一样). .gitignore最佳实践是忽略build文件，这些文件来自 node.js (node_modules, ...) 和GitBook的build文件: _book, *.epub, *.mobi, *.pdf. 封面 封面文件为: /cover.jpg.尺寸为 1800x2360. 插件 autocover可以自动创建一个文件. 封面的小尺寸图形为: /cover_small.jpg. 发布图书 平台 GitBook.io （现在改为gitbook.com，正式开始收费运营）就像\"Heroku for books\": 你可以在它上面创建图书 (公开的, 付费的, 或者私有的)， 并且使用 git push 就可以更新. 插件 插件可以扩展图书的功能.plugins.gitbook.com/ 参考：gitbook简明教程官方文档 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:36:31 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:36:31 "},"book/gitbook/根据目录生成summary.html":{"url":"book/gitbook/根据目录生成summary.html","title":"使用插件生成SUMMARY.md","keywords":"","body":"使用插件生成SUMMARY.md 插件地址:gitbook-plugin-summary book.json加入以下 { \"title\" : \"公共服务组文档库\" , \"theme-default\" : { \"showLevel\" : true } , \"plugins\" : [ \"summary\" , \"toggle-chapters\" , \"theme-comscore\" ] } 插件说明:summary: 自动生成SUMMARY.md文件 toggle-chapters: 菜单可以折叠 theme-comscore: 主题插件, 修改标题和表格颜色 根目录下新增0-README.md文件, 该文件对应gitbook中introduction菜单 gitbook新增菜单 在根目录下新增目录, 如取名 \"菜单1\", 在菜单1目录中新增0-README.md文件, 并在该文件中加入标题 # 菜单1 ...... 该标题对应gitbook中该菜单名称. 子菜单添加规则一致, 需要在目录中加入README.md文件, 并指定文件中的标题为菜单名称 在菜单中加入文件 在菜单中加入 用户指南 MARKDOWN文件, 并修改该文件的标题为 # 用户指南 ...... 注意事项 每个新增的目录中加入README.md否则菜单则为不可折叠 同个目录下的文件采用自然排序来决定菜单生成的前后顺序, 故在文件或目录前加入 \"数字-\" 如 \"0-\" 或 \"1-\" 来排序菜单的前后顺序. 菜单由目录自动生成, 菜单名称依赖md文件中的标题, 故每个md文件中必须添加标题, 否则无法生成目录. Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:28:13 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:28:13 "},"book/house/买房.html":{"url":"book/house/买房.html","title":"买房.md","keywords":"","body":"契税票,不动产增值税发票，(房产登记部门留原件) Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-09-30 10:25:19 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-09-30 10:25:19 "},"book/house/室内设计.html":{"url":"book/house/室内设计.html","title":"工具使用","keywords":"","body":"工具使用 https://www.3vjia.com/study/Guide/guide Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-09-30 10:25:19 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-09-30 10:25:19 "},"book/ios/1、开发证书配置.html":{"url":"book/ios/1、开发证书配置.html","title":"1、开发证书配置.md","keywords":"","body":"Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 10:28:47 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 10:28:47 "},"book/ios/2、创建工程.html":{"url":"book/ios/2、创建工程.html","title":"2、创建工程.md","keywords":"","body":"创建XCode项目 一、IOS的基础知识 1.只有一个应用程序正在运行。在IOS上，每一段时间内只能激活一个应用程序并在屏幕上显示。 2.只有一个窗口。只允许应用程序操作的一个窗口。 3.访问受限。只能在IOS为应用程序创建的文件系统中读写文件。此区域称为应用程序的沙盒，应用程序在其中存储文档、首选项等需要存储的各种数据。 4.有限的响应时间。 5.有限的屏幕大小。 6.有限的系统资源。 7.不支持垃圾收集。IOS引入了一个新特性——自动引用计数（Automatic Reference Counting ，ARC）解决这个问题。 二、创建基本项目 创建一个简单的Hello World 项目。 打开xcode-->File->New ->New Project 创建新项目。或者 shift+command+n 如图： 这里选择的时Single View Application 意思就是一个最简单的一个模板。接下来就是创建项目名称和公司标识等先看图： Product Name---项目名称 Company Identifier -- 公司标识 Class Prefix--类前缀 Device Family --设备（也就是准备在那个设备上开发） use StoryBoard --主要是在一个单独的可视化工作区中和多个视图协作，每个视图与其自身的控制器相关连。 Use Automatic Reference Counting --自动引用计数 InClude Unit Tests--单元测试 create local git repository for tho project 用于控制源码的。选择一个路径创建项目。 打开之后如下图： 要熟悉这个操作环境，大致可以分为一下几个部分 第一：工具栏 中间部分有NewHelloWorld这里的被称为活动视图（Active View）作用：显示当前发生的操作和进程。 右侧有三组按钮，Editor（视图） 标准视图 辅助视图 对照视图 View 主要是显示、隐藏位于编辑窗格两侧的导航窗格和实用工具窗格（utility pane) Organizer 在这里可以找到大量非定于项目的功能 工具栏正下方左侧是导航视图 项目导航----包含项目所有的文件。 符号导航-- --集中了所有工作区中定义的符号。 搜索导航----对工作区中的所有文件执行搜索。 问题导航----构建项目过程中出现的任何错误和警告都会在这里出现。窗口顶部活动视图中会显示一条列出错误数量的信息。 调试导航----进入调试过程的主视图。 断点导航----查看所有设置的所有断点。 日志导航----保留开发人员最近的构建结果和运行日志的历史记录。 跳转栏 最左侧的特别的图标实际是一个弹出菜单，显示最近的文件，未保存的文件，对应文件，父类和子类等。 左右箭头分别表示开发人员回到上一个文件或下一个文件。 右侧的实用工具栏是会根据窗格中的显示内容发生变化。 项目导航的文件夹结构 NewHelloWorld --包含编写的大部分代码以及组成应用程序用户界面的文件。 supporting files --包含所需的非object-c类的源代码文件和资源文件。 Frameworks --特殊的库，也包含图像和声音文件等资源。 Products --包含项目构建时所生成的应用程序。 File's Owner --文件拥有者 代表从磁盘上加载nib文件的对象。 First Responder --第一响应者 用户当前与之交互的对象。 view --图标则表示object-c类的一个实例 文件模板库（file template library）--包含一些文件模板。 代码片段库（code snippet library）--包含一些代码片段。 对象库（object library）--包含各种可重用对象。 媒体库（media library）--包括用户所有的媒体文件。 称之为检查器。最主要的时第四个 代表对象属性检查器（object attributes inspector） 修改文本字体大小，颜色等。 从库中拖入一个lable控件，双击修改成Hello World command+s保存后command+R运行。就出现了初学者引以为豪的HELLO WORLD！！！！！！偷笑 应用图标的创建。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 10:28:18 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 10:28:18 "},"book/ios/3、文本处理.html":{"url":"book/ios/3、文本处理.html","title":"3、文本处理.md","keywords":"","body":"方法一：添加代理 (BOOL)textField:(UITextField )textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString )string { NSString *tem = [[string componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]componentsJoinedByString:@\"\"]; if (![string isEqualToString:tem]) { return NO; } return YES; } 方法二： [self.searchTextField addTarget:self action:@selector(searchTextFieldChange:) forControlEvents:UIControlEventEditingChanged]; 在searchTextFieldChange方法中 直接替换空的字符串 (void)searchTextFieldChange:(UITextField *)textField{ textField.text =[textField.text stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"]; } Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-16 11:47:48 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-16 11:47:48 "},"book/ios/appicon.html":{"url":"book/ios/appicon.html","title":"Python脚本生成iOS全套AppIcon图标","keywords":"","body":"Python脚本生成iOS全套AppIcon图标评分: python appicon.py ./src.png 第一次运行可能会需要安装Image组件，可能会要权限不足。所以第一次运行最好加一个sudo python3 appicon.py ./src.png 生成的文件夹AppIcon.appiconset直接替换掉项目中Assets.xcassets里面对应的文件夹即可。 XCode9, XCode10 beta6下测试某问题 Mac快速制作AppIcon（App图标） App Icon Gear只需要一张1024*1024的原图即可生成一套图标 由于公司没有美工，所以app的设计、Icon、启动图片、欢迎图、按钮图标等，都要自己制作。这篇文章我介绍一种比较快速的方式来做：Keynote（也就是PPT）。 第一步：Keynote画图第二步：批量剪裁图标 第一步：Keynote画图 打开Keynote，选择“形状”里面的方框功能，画一个514 * 514的方框作为图标的底，然后在右边设计区填充背景颜色等等，可以很容易就做出渐变色等效果。然后再加上你自己的设计，利用直线、曲线、填充、渐变、阴影就差不多了。 为什么大小要是514 * 514呢？因为等你设计完你的图标后，我们要用截图工具截图，截一个512 * 512大小的图片保存，这样图片的像素才能是1024*1024的，符合App Store上架app的规范。而直接画个512 * 512 的底截图时会发现少两个像素。 值得注意的是，把图标保存到本地后，还要打开图片，再导出一次，取消图片的Alpha通道，符合App Store上架app的规范。 具体操作看这里，我就不重复写了：iOS 上架（小问题）去除图像中的alpha通道或透明度 第二步：批量剪裁图标 批量裁剪图标有两种方法 一种是裁剪图标网站： 在线批量剪裁各种尺寸iOS、Android APP LOGO图标 - aTool在线工具图标工场等等一大把...跟着网站里面的说明操作就可以了。 一种是用app： 比如App Icon Gear、Appicon and Launchimage Maker、DevelopersTools、APP Image Resizer、Prepo等等一大把... 这个app可以在App Store里面下载，虽然是英文的，但是操作很简单，直接把第一步做好的图标拖进主界面，就会生成各种比例大小的图标了，还可以预览效果，不满意可以重新第一步制作。 然后点击右上角的Export导出到指定文件夹，再根据大小拖到Xcode里面就完成了。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 18:07:46 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 18:07:46 "},"book/ios/connerstonmd.html":{"url":"book/ios/connerstonmd.html","title":"!","keywords":"","body":" 解决Connerstone死锁 0.084 2019.05.24 10:03:10 字数 243 阅读 21 前段时间有小伙伴问我Connerstone无法拉取和上传代码,一直转菊花是怎么回事,经过排查,是因为操作不当导致死锁.恰好之前也遇到过这个问题,帮他解决后在这里记录一下,当做笔记. 造成死锁的原因是在代码提交过程中退出了Connerstone(手贱退出其他应用时按Command + Q按快了🤣) 解决方案: 打开终端,输入命令 1.cd 项目路径 2.ls –al 查看项目下所有文件 3.找到.svn文件,输入命令sqlite3 .svn/wc.db \"select * from work_queue\" 查找卡住的任务队列 4.输入命令sqlite3 .svn/wc.db \"delete from work_queue\" 清除未完成的队列. 5.重新打开connerstone右键项目clean 至此,死锁问题已经解决,重新打开Connerstone即可.因为未完成的队列被清除,所以最后一次提交的代码需要重新提交. cornerstone创建分支与合并代码方法整理 Cornerstone - trunk、tags、branches trunk：用于各版本开发提交代码 tags：用于记录和保存每个发布版本的代码 branches：用于修复特定版本bug而创建的分支 以下为举个栗子： 创建一个Xcode Project，工程名为Winson，初始版本为V1.0； 在Cornerstone的Repositories指定目录下创建文件夹WinsonApp，勾选上subfolders选项； 上传工程Winson至WinsonApp目录下的trunk； check out WinsonApp目录下的trunk下的工程Winson至本地，名为WinsonTrunk； 在WinsonTrunk下开发，当第一个版本开发完成并发布之后，打个tag（在SVN服务器下的WinsonApp目录下的trunk下的工程Winson右键tag，在弹出窗口中指定tag路径为tags），名为Winson_V1.0； 主干继续开发新功能； 当新功能未开发完，但是已上线的V1.0出现了紧急bug需要立即修复并发布，这个时候，branchs就出现了； 首先找到V1.0的tag，即tags文件夹下的名为Winson_V1.0的文件，右键创建branch到branchs目录下，名为Winson_V1.0_Bug-fix； Winson_V1.0_Bug-fix开发完成并发布后，提交到服务器； 主干开始合并代码； 选中WinsonTrunk，先update然后commit，然后选中，点击Merge，Merg from选取本地的Winson_V1.0_Bug-fix，然后点击Merge Changes按钮； 合并完以后，提交WinsonTrunk的时候会发现有冲突，点击Confilicts一个一个修改，然后一个一个Resolve;UserInterfaceState.xcuserstate这个文件肯定会有冲突，这里先不改它，直接点Resolve，然后update，然后commit。 合并代码就此完成，主干与SVN服务器上的代码是最新的包含V1.0已修复bug的代码。 UserInterfaceState.xcuserstate？ Xcode中保存的用户操作的GUI状态，如窗口位置，打开的标签页，在项目检查等展开的节点、 简单地调整大小的Xcode窗口将这个文件来改变和修改您的源代码控制系统进行标记。 （一） 创建分支。 从云办公主干（Trunk）创建一个分支，放到branches中。步骤： 选择主干中文件（JJSMOA） 右击选择Branch 输入分支名称（JJSMOA_V3.0.1） 并选择需要存放的位置，默认的是错误的位置，需要重新选择（此处选择^/JJSMOA/branches） 点击创建分支即可。 创建完成后，在branch文件夹下面就可以看到刚刚添加的分支文件了。 图1 创建分支步骤截图 （二） 合并代码。 当在分支上开发完成后，需要合并到主干代码中。步骤： 先要check out一份目标代码到本地，即你要合并到哪个工程文件下，就需要先check out这个工程文件的代码。 选中需要合并的目的文件，如将JJSMOA_V3.0.1合并到JJSMOA中，此时应该选中JJSMOA 选中主功能区上面的Merge 选择合并的策略，主要有四种方式可以选择：Synchronization Branch、Reintegrate Branch、Cherry Pick Changes、Advanced Merge.图2 合并四种方式说明根据自己的需求选择不同的方式，我们一般选择默认的Synchronization Branch。 选择合并代码的来源文件。此处选择我们的分支文件，即JJSMOA_V3.0.1 选择合并选项。默认是包括所有文件。一般选择默认就可以。 选中合并按钮。图3 合并代码步骤截图 （三） 创建 创建tag与上述（一）中创建分支一样，此处就不再描述了。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-14 11:25:42 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-14 11:25:42 "},"book/ios/gitbookpei-zhi.html":{"url":"book/ios/gitbookpei-zhi.html","title":"gitbook","keywords":"","body":"gitbook 1、安装 1、npm install gitbook -g //安装命令 npm install -g gitbook-cli //卸载命令 npm uninstall -g gitbook cd x到项目文件夹下，执行 gitbook init gitbook ls gitbook ls-remote 列出远程可用的gitbook版本 gitbook update 更新到gitbook的最新版本 写文件 如果想要新增章节，可以在 SUMMARY.md 里面新增，然后执行 gitbook init 就会新增对应的 md 文件，原有文件不会变化；如果想要删除章节，在 SUMMARY.md 里面删除，然后执行 gitbook init 想要删除的 md 文件并不会删除，需要手动删除。 样式设置 1、配置book.json 安装插件 安装依赖gitbook install$ gitbook install ./ 预览 1、执行下面的命令 $ gitbook serve 然后浏览器中输入 http://localhost:4000 就可以预览生成的以网页形式组织的书籍。 debug 指定log的级别 gitbook build --log=debug 1 输出错误信息 gitbook builid --debug 编译 执行命令： gitbook build 1 运行该命令后会在根文件夹生成一个 _book 文件夹，包含了书籍的所有 html 文件. 可以使用该命令来生成网页而不开启服务器，也可以将_book文件夹部署到服务器上。 2、 生成静态网页时指定gitbook的版本，如果本地没有将先下载 gitbook build --gitbook=3.2.3 3、 $ mkdir /tmp/gitbook $ gitbook build --output=/tmp/gitbook Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 19:09:45 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 19:09:45 "},"book/ios/launch-image.html":{"url":"book/ios/launch-image.html","title":"iOS.11后的 iOS LaunchImage","keywords":"","body":"iOS.11后的 iOS LaunchImage 开始 两种方法设置： LaunchScreen.storyboard 在LaunchScreen.storyboard中拖拽imageView并设置约束，勾选右侧Use as launch Screen 工程—General—App Icons and Launch Images选项中设置Launch Screen File为所制作的LaunchScreen.storyboard或者LaunchScreen.xib Assets.xcassets 设置LaunchImage 准备:640 × 960，640 × 1136，750 × 1334，1242 × 2208，（横平需要2208 ×1242） 1125x2436,1242x2688,828x1792 iPhone Portrait iOS5,6\\(1x:320 × 480 pixels, 2x:640 × 960 pixels, Retina 4:640 × 1136 pixels\\) iPhone Portrait iOS7,9\\(2x:640 × 960 pixels, Retina 4:640 × 1136 pixels\\) iPhone Portrait iOS8,9\\(Retina HD 5.5”:1242 × 2208 pixels, Retina HD 4.7”:750 × 1334 pixels\\) iPhone Landscape iOS 8,9\\(Retina HD 5.5”:2208 × 1242 pixels\\) iPhone X Portrait iOS 11+ \\(3x:1125 x 2436 pixels\\) iPhone X Landscape iOS 11+\\(Retina HD 5.5”:2208 × 1242 pixels\\) iPhone XR Portrait iOS 12+ \\(3x:1242 x 2688 pixels\\) iPhone XS Max Portrait iOS 12+ \\(3x:828x1792 pixels\\) 配置 工程—General—App Icons and Launch Images选项中设置Launch Image Source 为LaunchImage 取消勾选Use as Launch Screen 置空路径Launch Screen File 更新时间2018年10月07日 ps：最新LaunchImage尺寸图 iOS--LaunchImage启动页设置及问题解决 在Assets.xcassets中使用LaunchImage来设置启动图: 一.根据不同屏幕尺寸的需求设置不同的图片，可以参照下图： 1.点击Image.xcassets 进入图片管理,然后右击,弹出\"New Launch Image\" 2.右侧的勾选可以让你选择是否要对ipad,横屏,竖屏,以及低版本的ios系统做支持 注意: 为适配 iPhone X, 图片尺寸为1125px*2436px 二.取消系统默认使用的LaunchScreen，首先你要取消Use as Launch Screen 的选中 三.需要设置Launch Screen File 单击你整个项目名称, 选择General,就是这个. 在配置好以上之后启动页的图片就会使用LaunchImage中的图片了.. 但是经过上述步骤之后，你觉得完全没有问题了，但是仍然无法显示LaunchImage。 或者，你在多个模拟器上运行该程序，有的模拟器能够显示，有的模拟器不能显示。 这时候你可能会有3个选择： 菜单－product－Clean－rebuild，也就是重新build程序。 菜单－Xcode－preference－Locations－Derived data－open in Finder，然后删除其中的缓存文件，并重新build程序。 3.把App在模拟器上卸载掉，然后重新build。 4.reset模拟器 正常情况下，LaunchImage 应该会显示了。 如果真的真的还是不显示的话, 或者遇到5s真机测试时屏幕变小,且有上下两条黑道的话,那就是图片的问题,是否为jpeg转为png的呢?又或者是图片大小不对. 这是我遇到过的情况. Mac快速制作LaunchImage（App启动图片） 第一步：Keynote画图第二步：批量剪裁图片 第一步：Keynote画图 打开Keynote，选择“形状”里面的方框功能，画一个322 * 570的框作为图标的底，然后在右边设计区填充背景颜色等等，可以很容易就做出渐变色等效果。然后加上公司logo、几个艺术字就差不多能用了。 为什么底大小要是322 * 570呢？实际上任何大小都可以，只要看起来跟手机屏幕差不多就行，但是一会更改图片像素大小适配手机的时候，会有拉伸和压缩，这是一个中间值，太大按比例缩放电脑屏幕放不下，太小不好做设计。设计完启动图后，我们要用截图工具截图，截一个320 * 568大小的图片保存，这样图片的像素是640 * 1136的。而直接画320 * 568的底截图时会发现少两个像素。 第二步：批量剪裁图片 我没有发现制作LaunchImage的网站，所以我用的app。而好多app，比如Prepo，裁剪AppIcon免费，裁剪LaunchImage要内购收费。最终我用的这个：App Icon Gear 先选择功能，是AppIcon还是LaunchImage 选择好后，把第一步设计好的图拖进左边的方框 然后会转到生成完成界面 AppIcon LaunchImage 点击右上角红箭头指的文件夹按钮保存，会自动打开所在文件夹 如果有帮助到你，给个❤️支持一下O(∩_∩)O Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 17:45:49 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 17:45:49 "},"book/ios/mac快捷键.html":{"url":"book/ios/mac快捷键.html","title":"mac快捷键.md","keywords":"","body":"1、打开或关闭隐藏程序坞; 【快捷键】单击，【启动台和程序坞】单击，如图。勾上【打开或关闭隐藏程序坞】，如图。按快捷键【⌥+cmmand+D】，如图。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-11 10:34:52 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-11 10:34:52 "},"book/ios/ttmd.html":{"url":"book/ios/ttmd.html","title":"ttmd.md","keywords":"","body":"Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 19:09:45 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 19:09:45 "},"book/ios/xcodebao-cuo-ji-zhong.html":{"url":"book/ios/xcodebao-cuo-ji-zhong.html","title":"xcodebao-cuo-ji-zhong.md","keywords":"","body":"问题一:运行xcode模拟器时报错：Command PhaseScriptExecution failed with a nonzero exit code 这是因为Xcode10是默认选中的最新的New Build System(Default)，在这个编译系统的环境下，打包的CI脚本一直会报错。 解决方案： Xcode菜单栏选择File-- Workspace Setting，把new build system(Defalt)切换到 Legacy Build System 在模拟器上运行就OK！ Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 19:09:45 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 19:09:45 "},"book/ios/xiang-mu-gou-jian-liu-cheng.html":{"url":"book/ios/xiang-mu-gou-jian-liu-cheng.html","title":"问题一：Safe Area Layout Guide before iOS 9.0","keywords":"","body":"问题一：Safe Area Layout Guide before iOS 9.0 [12] 解决方案如下:在项目报错地方打开Main.storyboard 然后在右边工具栏找到如图位置选中View Controller，在属性中去掉Use Safe Area Layout Guides Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 19:09:45 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 19:09:45 "},"book/ios/xiang-mu-gou-jian.html":{"url":"book/ios/xiang-mu-gou-jian.html","title":"正确设置info.plilst的位置方法","keywords":"","body":"问题一:修改info.plist 我想了半天才想起我之前有更改过Info.plist与Prefix.pch的名字及位置，由于工程内有Run Script涉及到自动增加CFBundleVersionNumbel的脚本，但是，由于我之前更改过info.plist文件的名字和位置，所以导致无法正确获取CFBundleVersionNumbel的值。导致问题的info.plilst文件位置设置截图 导致问题的info.plilst文件位置设置.png 导致出现问题的主要原因就是在Build Settings 的 info�.plist文件的路径上多添加了一个$(SRCROOT)，导致路径错误； 正确设置info.plilst的位置方法 直接使用工程主目录和其目录下的info.plist文件的相对路径，也即以上将$(SRCROOT)去掉后的路径；ps：$(SRCROOT)其实就是当前目录的意思 其实，如果在其他位置没有自己直接调用plist文件的内容，就像我在RunScript中调用CFBundleVersionNumbel值这样，在工程名前，加或者不加上\"$(SRCROOT)/\"都可以正常使用，只是建议不要添加$(SRCROOT)，因为写的越具体，在其他位置调用起来遇到的麻烦反而有可能越多；.pch文件跟.plist文件基本一致，所以不再重述； Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 16:52:49 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 16:52:49 "},"book/ios/工程清理.html":{"url":"book/ios/工程清理.html","title":"iOS APP瘦身 清除无用图片资源和import的代码","keywords":"","body":"iOS APP瘦身 清除无用图片资源和import的代码 0.324 2017.05.03 17:44:22 字数 591 阅读 2566 app开发到一定阶段，必然会面临着包越来越大，需要瘦身。那么首先要考虑的就是清除无用的图片资源，因为图片资源占的空间相对较大。 ·清除无用图片资源 这里只说shell脚本查找的方式，因为觉得相对来说是最方便简洁的，同时可以把这个脚本放在工程中，定期清理。新建一个shell脚本，代码如下： #! /bin/bash echo \"\" > UnusedPic.txt for i in `find . -name \"*.png\" -o -name \"*.jpg\"`; do file=`basename -s .jpg \"$i\" | xargs basename -s .png | xargs basename -s @2x | xargs basename -s @3x` result=`ack -i \"$file\"` if [ -z \"$result\" ]; then echo \"$i\" > > UnusedPicture.txt fi done 把这个shell文件命名为UnusedPicture.sh放到工程目录下，如果使用了cocopods就放到同名文件目录下。打开终端，输入命令 shell UnusedPicture.sh，就会开始查找了，结束后会在同目录下生成一个UnusedPicture.txt，里面是所有查到没有使用的图片。这里要提一下，因为是按照图片名来查找的，但是代码中我们实际上是按照imageset名称来使用的，所以添加的图片的时候应该尽量保证两个名字一致。所有检查出来的图片尽量都在工程中全局搜索一下，因为会有误搜的，也会有类似于loading_%d这样使用的。 ·清除没用到的import代码 这个在一次次迭代和重构后数量也并不少。有一个现成的工具，就是fui，非常好用，错误率比较低。以前可以直接添加插件使用，但是现在大家都知道，xcode不能使用第三方的插件了，也有办法破解，但是确实很麻烦，效果也不好。所以我们还是直接用终端来用fui。fui的guthub写了用法，也很简单：gem install fui。但是就这一句都经常会出现问题，比如 ERROR : While executing gem . . . ( Errno : : EPERM ) Operation not permitted - / usr / bin / gli 这是因为OSX el Capitan为了避免修改系统根目录而增加的限制，可以这样做 sudo gem install -n /usr/local/bin fui 运行完成后会直接在终端展示出很多没用的代码，有的是import了但是没有使用的，也有目录下有但是工程中没有添加到也没有用到的，最好还是全局搜索一下再删除。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-12 15:17:29 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-12 15:17:29 "},"book/ios/开发中的快捷键.html":{"url":"book/ios/开发中的快捷键.html","title":"开发中的快捷键.md","keywords":"","body":"0、调起特殊符号键盘,cotrol+command+空格键 1、option + shift + 9 快捷键 iOS中让省略号垂直居中// 在显示等待框时，一般要求在提示信息后面加个省略号，但中文输入法下输入的省略号是在底部对齐，但中//// 文的习惯是省略号垂直居中对齐，最后找到下面这个方法来显示垂直居中的省略号：//// 中文和英文输入法下一样：//// option + shift + 9。输出的是一个垂直居中的点，多输入就个这个点就可以模拟垂直居中的省略号了，效果如下： 2、iOS-10-Xcode增加复制行、删除行快捷键的方法 运行： sudo chmod 666 /Applications/XcodeA.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist 然后打开/Applications/XcodeA.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist， 删除整行然后找到 root 下的 Deletions ，在 Deletions 下添加一个key： Delete Current Line 值为： deleteToBeginningOfLine:, moveToEndOfLine:, deleteToBeginningOfLine:, deleteBackward: 复制整行和在下方添加一行 在 Insertions and Indentations 下添加两个key： Duplicate Current Line 值为： selectLine:, copy:, moveLeft:, moveToEndOfLine:, insertNewline:, paste:, deleteBackward: Insert Line Under 值为： moveToEndOfLine:, insertNewline: 设置快捷键 重启一下 Xcode ，然后在 preferences 里找到 Key Bindings ，就能找到 Delete Current Line 和 Duplicate Current Line 两个选项了，最后设置自己喜欢的快捷键即可 3、新版本xcode注释快捷键失效 解决方案一: It still happens in Xcode 8.1 which was installed from Mac App Store. I triedsudo usr/libexec/xpccachectl, but no luck. I could solve this be reassigning shortcut keys again. Go to Preference - > Key Bindings Set some random shortcut key on Structure - > Comment Selection menu. You don't have to change all of them. One is enough. Set it back to Command + / again. Now it works. 解决方案二: 一搜索好嘛，几乎全是这个方法: sudo /usr/libexec/xpccachectl Use `sudo xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools, or use `xcode-select --install` to install the standalone command line developer tools. See `man xcode-select` for more details. 然鹅，这个方法是历史的产物，在High Sierra的系统里，已经没有了这个脚本,不甘心的搜索了好多圈，找到一个相关的解决方法， 如果中间遇到/usr/libexec/xpccachectl: command not found 解决办法: /Applications/Xcode.app/Contents/MacOS/Xcode -installComponents 不过我运气不太好，无效。 最后，我的解决办法并没有什么神奇，我把Xcode改名XcodeA，然后又改回去，上面我的截图的B的部分已经恢复正常了。就像这个问题里说的，Rename is good. 这篇讨论基本上可以终结这个问题了，这是一个bug，从简单到复杂，能做的就只有：(重命名xcode为XCodeA,重启xcode即可) 重启Xcode 重启电脑 重命名Xcode 重新下载Xcode 升级系统 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-11 21:10:38 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-11 21:10:38 "},"book/ios/正则表达式.html":{"url":"book/ios/正则表达式.html","title":"正则表达式.md","keywords":"","body":"/** 正则表达式简单说明 []内的未元字符组合，()表达式 知识点 第三方库(https://github.com/chenfanfang/CollectionsOfExample) 普通字符 普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。 非打印字符 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列： 字符 描述 \\cx 匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。 \\S 匹配任何非空白字符。等价于 \\f\\n\\r\\t\\v。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 特殊字符 所谓特殊字符，就是一些有特殊含义的字符,要带上转义符 限定符 限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配，有 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种，、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。 定位符 定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。 定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\\b 描述单词的前或后边界，\\B 表示非单词边界。 正则表达式的定位符有： 字符 描述 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。 \\b 匹配一个单词边界，即字与空格间的位置。 \\B 非单词边界匹配。 注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。 若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。 若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。 选择 用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。 其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。 反向引用 对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \\n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。 可以使用非捕获元字符 ?:、?= 或 ?! 来重写捕获，忽略对相关匹配的保存。 反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例： 语法： . 匹配除换行符以外的任意字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符 \\d 匹配数字 \\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 重复零次或更多次 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 \\W 匹配任意不是字母，数字，下划线，汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意非数字的字符 \\B 匹配不是单词开头或结束的位置 x 匹配除了x以外的任意字符 aeiou匹配除了aeiou这几个字母以外的任意字符 *? 重复任意次，但尽可能少重复 +? 重复1次或更多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 {n,m}? 重复n到m次，但尽可能少重复 {n,}? 重复n次以上，但尽可能少重复 \\a 报警字符(打印它的效果是电脑嘀一声) \\b 通常是单词分界位置，但如果在字符类里使用代表退格 \\t 制表符，Tab \\r 回车 \\v 竖向制表符 \\f 换页符 \\n 换行符 \\e Escape \\0nn ASCII代码中八进制代码为nn的字符 \\xnn ASCII代码中十六进制代码为nn的字符 \\unnnn Unicode代码中十六进制代码为nnnn的字符 \\cN ASCII控制字符。比如\\cC代表Ctrl+C \\A 字符串开头(类似^，但不受处理多行选项的影响) \\Z 字符串结尾或行尾(不受处理多行选项的影响) \\z 字符串结尾(类似$，但不受处理多行选项的影响) \\G 当前搜索的开头 \\p{name} Unicode中命名为name的字符类，例如\\p{IsGreek} (?>exp) 贪婪子表达式 (?-exp) 平衡组 (?im-nsx:exp) 在子表达式exp中改变处理选项 (?im-nsx) 为表达式后面的部分改变处理选项 (?(exp)yes|no) 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no (?(exp)yes) 同上，只是使用空表达式作为no (?(name)yes|no) 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no (?(name)yes) 同上，只是使用空表达式作为no 捕获 (exp) 匹配exp,并捕获文本到自动命名的组里 (?exp) 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp) (?:exp) 匹配exp,不捕获匹配的文本(也就是说这是一个非获取匹配，不进行存储供以后使用)，也不给此分组分配组号 零宽断言 (?=exp) 匹配exp前面的位置 (? 匹配8-16位数字和字母密码的正则表达式 ** ^匹配一行的开头位置 (?![0-9]+$) 预测该位置后面不全是数字 (?![a-zA-Z]+$) 预测该位置后面不全是字母 [0-9A-Za-z] {8,16} 由8-16位数字或这字母组成 $ 匹配行结尾位置 String regex = \"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$\"; 匹配8-16位，至少有一个大写字母和一个数字，不能有三个相同的字符，特殊字符包括~!@&$%^()# 其中\\( 表示匹配（ .\\1表示与前面相同 ^()括号内的表达式才是内容与^[]必须与括号内表达式匹配开头不同,而a-z表示非 NSString regex = @\"^(?=.[A-Z])(?=.[0-9])(?!.([~!@&%$^\\(\\)#]).\\1.\\1)[A-Z0-9~!@&%$^\\(\\)#_]{8,16}$\"; \\u4e00-\\u9fa5_ 表示不在区间 正则省略汉字(\\u4e00-\\u9fa5+)能加上再省略(&+) ^[A-Za-z0-9\\u4E00-\\u9FA5_-]+$ // 不含有非法字符 表达式：(?0\\d{2}[) -]?\\d{8} 这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。 我们对它进行一些分析吧： * 首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)， 最后是8个数字(\\d{8}) */ Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-18 15:37:11 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-18 15:37:11 "},"book/ios/测试.html":{"url":"book/ios/测试.html","title":"app性能测试简要步骤：","keywords":"","body":"app性能测试简要步骤： 一、 准备步骤 下载xcode 可以通过访问 https://developer.apple.com/xcode/downloads/ 下载最新的xcode的版本 2.打开xcode，右键xcode选择instruments，如果测试Cpu/内存就选择activity monitor，如果测试耗电量也有相应的选择Energy diagnostic 二、Cpu/内存测试 选择activity monitor打开，加载好app，点击录制，操控app，停止录制，将cpu/内存值记录下来 三、耗电测试 1.选择Energy diagnostic打开 2.找一个最好苹果9系统的测试机，iOS 设置选项 －开发者选项 －logging －start recording 3.断开iOS设备测试机和电脑、电源的连接 4.在测试机上操控app 5.iOS 测试设置选项 －开发者选项 －logging －stop recording 6.USB连接iOS device和MAC PC 7.打开instruments －energy diagnostics －file－import logged data from device，就可以看到电量数据； 测试方法： 一般多执行几次，记录每次数据和平均数据 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-23 13:43:20 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-23 13:43:20 "},"book/ios/问题集合.html":{"url":"book/ios/问题集合.html","title":"问题一：Safe Area Layout Guide before iOS 9.0","keywords":"","body":"问题一：Safe Area Layout Guide before iOS 9.0 [12] 解决方案如下:在项目报错地方打开Main.storyboard 然后在右边工具栏找到如图位置选中View Controller，在属性中去掉Use Safe Area Layout Guides 问题 二: uitableview 滚动到指定行出错 //一个section刷新 NSIndexSet *indexSet=[[NSIndexSet alloc]initWithIndex:2]; [tableview reloadSections:indexSet withRowAnimation:UITableViewRowAnimationAutomatic]; //一个cell刷新 NSIndexPath *indexPath=[NSIndexPath indexPathForRow:3 inSection:0]; [tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:indexPath,nil] withRowAnimation:UITableViewRowAnimationNone]; // 滚动到指定位置 [self.tableView reloadData]; NSIndexPath * dayOne = [NSIndexPath indexPathForRow:0 inSection:2]; [self.tableView scrollToRowAtIndexPath:dayOne atScrollPosition:UITableViewScrollPositionTop animated:YES]; 一般不开启动画,即animated:NO; //隐藏 self.tableView.showsVerticalScrollIndicator = NO; //修改颜色 self.tableView.indicatorStyle=UIScrollViewIndicatorStyleWhite; UITableView 滚动到指定行 section 参考:http://www.mamicode.com/info-detail-416394.html 要注意://1、(tableview的frame 不能为(0,0,0,0)); //2、headerview 一定要与setion数量一致对应,不需要的section 去掉,不然会crash NSIndexPath\\*indexPath = \\[NSIndexPathindexPathForRow:0 inSection:2\\]; CGRect frame = [tableviewrectForSection:indexPath.section]; [indexBar.tableView setContentOffset:CGPointMake(0, frame.origin.y) animated:NO]; if(index == 0 || index == NSNotFound) { [indexBar.tableView scrollRectToVisible:CGRectMake(0, 0, indexBar.tableView.width, indexBar.tableView.height) animated:NO]; }else{ // [indexBar.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:indexPath.row inSection:index] atScrollPosition:UITableViewScrollPositionTop animated:NO];//滚动出现偏移,并且内容不多的时候不会滚动(原因是ContentOffset没有改变) CGRect frame = [indexBar.tableView rectForSection:indexPath.section]; [indexBar.tableView setContentOffset:CGPointMake(0, frame.origin.y) animated:NO]; } 问题三:界面适配 self.tableView =self.view.addTableView(1) .backgroundColor([UIColorcolorGrayBG]).separatorStyle(UITableViewCellSeparatorStyleNone) .tableFooterView([UIViewnew]) .masonry(^ (MASConstraintMaker *make) { // hh_layoutEdges(make,self); hh_layoutEdgeOffsets(make, self, UIEdgeInsetsMake(10, 0, 0, 0)); }) .view; // self.extendedLayoutIncludesOpaqueBars = NO; // self.edgesForExtendedLayout = UIRectEdgeBottom | UIRectEdgeLeft | UIRectEdgeRight; hh_neverAdjustContentInset(self,self.tableView); Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-11 11:10:33 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-11 11:10:33 "},"book/ios/项目兼容性.html":{"url":"book/ios/项目兼容性.html","title":"项目兼容性.md","keywords":"","body":"在苹果在iOS7中引入的Top Layout Guide和Bottom Layout Guide,这些布局指南在iOS 11中被弃用，取而代之的是Safe Area Layout Guide. 针对新特性，解决方案如下 第一步、在项目报错地方打开Main.storyboard 然后在右边工具栏找到如图位置选中View Controller，在属性中去掉Use Safe Area Layout Guides Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-23 14:03:34 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-23 14:03:34 "},"book/os/knowledge.html":{"url":"book/os/knowledge.html","title":"知识库","keywords":"","body":"知识库 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/linux/linux.html":{"url":"book/os/linux/linux.html","title":"Linux","keywords":"","body":"Linux Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/mac/git/git.html":{"url":"book/os/mac/git/git.html","title":"Git 创建分支提交远程分支详解","keywords":"","body":"git回滚到任意版本 先显示提交的log $ git log -3 commit 4dc08bb8996a6ee02f Author: Mark xxx@xx.com Date: Wed Sep 7 08:08:53 2016 +0800 xxxxx commit 9cac9ba76574da2167 Author: xxxxx@qq.com Date: Tue Sep 6 22:18:59 2016 +0800 improved the requst commit e377f60e28c8b84158 Author: xxxxxx@qq.com Date: Tue Sep 6 14:42:44 2016 +0800 changed the password from empty to max123 回滚到指定的版本 git reset --hard e377f60e28c8b84158 强制提交 git push -f origin master Git——如何将本地项目提交至远程仓库(第一次) 1.（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库。 git init 2.把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件(夹)。 git add . 3.commit到主分支 git commit -m \"描述\" 4.登录github，把本地仓库提交至远程仓库。 接下来你要做的就是复制那个地址，然后你将本地仓库个远程仓库连接起来。 git remote add origin git@github.com:Garretming/blog.git 5.进行第一次提交 git push -u origin master ps: windows系统中使用git时报错“warning: LF will be replaced by CRLF”解决方案： 复制代码 复制代码 $ rm -rf .git // 删除.git$ git config --global core.autocrlf false //禁用自动转换 //然后重新执行 $ git init$ git add . 复制代码 复制代码 rm -rf .git慎用！！！！原因详见：https://www.zhihu.com/question/29438735 不小心敲了rm -rf后反应是怎样的？ Git 创建分支提交远程分支详解 1.创建本地分支 git branch 分支名，例如：git branch 2.0.1.20120806 注：2.0.1.20120806是分支名称，可以随便定义。 2.切换本地分支 git checkout 分支名，例如从master切换到分支：git checkout 2.0.1.20120806 3.远程分支就是本地分支push到服务器上。比如master就是一个最典型的远程分支（默认）。 git push origin 2.0.1.20120806 4.远程分支和本地分支需要区分好，所以，在从服务器上拉取特定分支的时候，需要指定远程分支的名字。 git checkout --track origin/2.0.1.20120806 注意该命令由于带有--track参数，所以要求git1.6.4以上！这样git会自动切换到分支。 5.提交分支数据到远程服务器 git push origin : 例如： git push origin 2.0.1.20120806:2.0.1.20120806 一般当前如果不在该分支时，使用这种方式提交。如果当前在 2.0.1.20120806 分支下，也可以直接提交 git push 6.删除远程分支 git push origin :develop 1,从已有的分支创建新的分支(如从master分支),创建一个dev分支 ? 1 Git checkout -b dev 2,创建完可以查看一下,分支已经切换到dev ? 1 2 3 4 git branch dev master 3,提交该分支到远程仓库 ? 1 git push origin dev 4,测试从远程获取dev ? 1 git pull origin dev 或者： 如果用命令行，运行 git fetch，可以将远程分支信息获取到本地，再运行 git checkout -b local-branchname origin/remote_branchname 就可以将远程分支映射到本地命名为local-branchname 的一分支 5,我觉得现在重要的就是设置git push,pull默认的提交获取分支,这样就很方便的使用git push 提交信息或git pull获取信息 ? 1 git branch --set-upstream-to=origin/dev 取消对master的跟踪 ? 1 git branch --unset-upstream master 6,现在随便修改一下工程文件的内容,然后git commit ,git push,之后就可以直接提交到远程的dev分支中,而不会是master git 创建分支 并 提交到远程分支 git branch（分支命令的使用 http://hbiao68.iteye.com/blog/2055493 0.可以通过git branch -r 命令查看远端库的分支情况 1,从已有的分支创建新的分支(如从master分支),创建一个dev分支 git checkout -b dev 2,创建完可以查看一下,分支已经切换到dev git branch * dev master 3.建立本地到上游（远端）仓的链接 --这样代码才能提交上去 git branch --set-upstream-to=origin/dev 取消对master的跟踪 git branch --unset-upstream master git 创建分支提交远程分支 以下两个应该是同一个意思，=upstream : 上游码流的意思 git branch --set-upstream-to=master git branch --set-upstream-to=original/master git help branch git branch [--set-upstream | --track | --no-track] [-l] [-f] [] git branch (--set-upstream-to= | -u ) [] git branch --unset-upstream [] git branch --set-upstream-to=original/master new git branch --set-upstream debug origin/debug //其中debug为创建的分支 git branch --set-upstream debug origin/debug 提交该分支到远程仓库 git push origin dev git push origin与git push -u origin master的区别 $ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。 如果当前分支只有一个追踪分支，那么主机名都可以省略。 $ git push 如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。 $ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 本地分支代码提交到远端库 git push origin master git push origin HEAD:refs/for/远端分支名 git push origin 本地分支名:refs/for/远端分支名 eg: git push origin test:refs/for/master #本地test分支代码提交到远端master库 在远端服务器新建分支： 方法1： git checkout -b dev 建立本地到上游（远端）仓的链接 --这样代码才能提交上去 git branch --set-upstream-to=origin/dev git branch --set-upstream debug origin/debug //其中debug为创建的分支 git push origin dev 取消对master的跟踪 git branch --unset-upstream master 方法2： git branch -b stage2 git push origin 本地分支名:远端分支名xx // 在服務器新建新分支名xxx 对比： git branch -b stag2 git push origin stage2:refs/for/stage2 // 代码入庫命令，不会新建新分支在远端 切换当前分支 git checkout --orphan gh-pages 上传到远程分支 git push -u origin gh-pages Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/mac/mac.html":{"url":"book/os/mac/mac.html","title":"Mac","keywords":"","body":"Mac Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/mac/npm.html":{"url":"book/os/mac/npm.html","title":"npm.md","keywords":"","body":"npm install、npm init、npm update、npm uninstall和package.json node.js 19k 次阅读 · 读完需要 6 分钟 npm install 安装本地包 npm install :这个命令将在当前目录中创建node_modules目录（如果尚不存在），并将该软件包下载到该目录。该命令默认本地安装。 安装了哪个版本的软件包？ 如果本地目录中没有package.json文件，则会安装最新版本的软件包。 如果有package.json文件，则安装满足该package（如果有的话）在package.json中声明的semver规则的最新版本。 安装全局包 npm install -g ：全局安装包。 package.json npm init npm init：这个命令用于创建一个package.json。 npm init --yes或npm init -y:从当前目录中提取的信息生成默认的package.json。创建过程中不会提问。 如果您的目录中已经有一个package.json文件，并且运行了npm install，那么npm将查看该文件中的dependencies，并下载满足所有这些的最新版本。 package.json文件中的description帮助人们在npm搜索中找到您的包，所以在package.json中进行自定义描述非常有用。 也可以完全自定义package.json文件的内容和在init期间提出的问题。这通过创建自定义.npm-init.js来完成。默认情况下，npm将查找您的主目录。 〜/ .npm-init.js dependencies与devDependencies dependencies和devDependencies指定了项目依赖的包。 dependencies：这些包在生产中需要。 devDependencies：这些包用于开发和测试。 npm install --save命令会添加条目到package.json的dependencies中。 npm install --save-dev命令会添加条目到package.json的devDependencies中。 npm update 更新本地软件包 npm update：用于更新依赖的软件包。需要在package.json文件所在的目录中运行该命令。 更新全局软件包 npm update -g ：更新全局软件包。 npm update -g：更新所有的全局软件包。 npm outdated -g --depth=0：找出需要更新的包。 npm uninstall 卸载本地软件包 npm uninstall ：从node_modules目录中移除一个包。 npm uninstall --save ：从package.json的dependencies中移除一个包。 npm uninstall --save-dev ：从package.json的devDependencies中移除一个包。 实际操作时，发现使用npm uninstall 不仅会在node_modules目录下删除该包，还会将该包在package.json中dependencies或devDependencies里面的信息删除。 卸载全局软件包 npm uninstall -g ：卸载全局软件包。 npm audit ： npm@5.10.0 & npm@6，允许开发人员分析复杂的代码，并查明特定的漏洞和缺陷。 npm audit fix ：npm@6.1.0, 检测项目依赖中的漏洞并自动安装需要更新的有漏洞的依赖，而不必再自己进行跟踪和修复。 同时，官网中还提供了一些其他的命令，整理如下： 运行audit fix，但是只更新pkglock， 不更新node_modules： $ npm audit fix --package-lock-only 只更新dependencies中安装的包，跳过devDependencies中的包： $ npm audit fix --only=prod 3.运行命令，得到audit fix将会更新的内容，并且输出json格式的安装信息，但是并不真的安装更新： $ npm audit fix --dry-run --json 得到json格式的详细检测报告 $ npm audit --json 附： npm-audit 官网地址：https://docs.npmjs.com/cli/audit Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/os.html":{"url":"book/os/os.html","title":"操作系统","keywords":"","body":"操作系统 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/unix/unix.html":{"url":"book/os/unix/unix.html","title":"Unix","keywords":"","body":"Unix Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/os/win/windows.html":{"url":"book/os/win/windows.html","title":"windows","keywords":"","body":"windows Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-07-13 11:00:55 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-07-13 11:00:55 "},"book/taobao/":{"url":"book/taobao/","title":"taobao","keywords":"","body":"下载地址： http://350.sxysgg.top/key.aspx?p=20&g=117&k=2501 注册码生成 http://www.350pt.com/zhuce/ 350账号注册地址： 点击注册350账号 350模板试用地址： 点击马上试用 淘宝店铺装修代码在线生成工具【合集】 https://www.yymoban.com/a/taobaojingyan/taobaozhuangxiujingyan/2016/0820/2023.html Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-08 17:30:49 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-08 17:30:49 "},"book/taobao/SUMMARY.html":{"url":"book/taobao/SUMMARY.html","title":"Summary","keywords":"","body":"Summary 装修工具资料 店招 页头背景 PS 2019cc 宝贝图片 茶类基础知识 单丛茶 淘宝茶类 分类 基本分类 茶形态 客家炒茶 PS 2019cc 红茶.md 发布商品.md Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-15 22:49:57 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-15 22:49:57 "},"book/taobao/ps-2019cc.html":{"url":"book/taobao/ps-2019cc.html","title":"ps-2019cc.md","keywords":"","body":"在线ps： http://www.yymoban.com/ps.html 在线美图秀秀： http://www.yymoban.com/tool/zuotu/mtxx.html 在线ps全屏： http://www.yymoban.com/tool/zuotu/qpps.html 本地PS下载和教程地址： http://www.zuirouqing.com/forum-115-1.html 主图尺寸800*800最低要500*500;详情页尺寸750,天猫是790 2019 cc老是崩溃; 试试在编辑里→首选项→性能里面找到【使用图形处理器】，下面的【高级设置】，里面默认是高级，你可以调节成正常或基本的选项，有中文说明的，确认保存设置后重启软件使用试试。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:46:07 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:46:07 "},"book/taobao/产品归类.html":{"url":"book/taobao/产品归类.html","title":"产品归类.md","keywords":"","body":"茶饮是生活中很常见的，有的人早中晚都会喝上一杯茶，成为生活中不可或缺的一个品饮。那么，你知道自己经常喝的茶是怎么制作的吗？现在就让我们一起来了解一下手工茶叶的制作过程。 　　手工茶叶的制作过程如下： 　　1、鲜叶的采摘 用于做高档名优茶的鲜叶要求采摘清明前的嫩芽为主，采摘时注意“三不采”，即不采雨水叶、红紫叶、虫伤叶。 　　2、摊青 新茶采摘回来后，需将其摊开放在篾晒垫上，中途均匀翻动3到4次。周长树介绍，“要自然萎凋6到8个小时，使茶叶的香气慢慢的散发出来。” 　　3、杀青 摊青之后就是杀青，这是关键一环。绿茶的形状、香味，都与杀青紧密相关。具体操作是将茶叶倒进锅内，随即用双手翻炒，使茶叶均匀受热，水分快速蒸发。“手工操作时要求适温、适度、适量，温度适当先高后低，切忌温度过高或过低。如原料以嫩芽为主，锅温温度控制在110℃-120℃，每锅投叶量300-400克。” 　　4、散热、揉捻 茶叶出锅后，放在篾盘上，及时清风散热。同时，用双手在篾盘上反复揉捻，使叶细胞组织受到一定程度的损伤，内含物质渗出，为成品茶香味发挥打下基础。 　　5、干燥、造形 手工传统绿茶制作一般没有单独的造形工序，而是把造形与干燥结合起来，其关键是随着茶叶含水量的下降，根据不同的外形要求在锅中把握好火候，采用不同的手式，掌握力度，在逐步干燥中造形时又在逐步形成中干燥。这一过程费时费力最多，但极为重要，直接影响茶叶的品质。 　　6、提毫 当茶叶达到八成干时，也就是手握茶叶有明显刺手感时，可以开始提毫，即灵活地运用双手，使芽条相互摩擦。过早提毫难以奏效，过迟会把白毫搓掉造成茶叶短碎。只要手势与力度掌握得恰到好处，经过3到5分钟，就可以获得最佳效果。 　　7、足火 其主要的目的是去除芽叶多余的水分，达到足干(含水量6%左右)以利于贮藏，同时去水塑造外形，在干燥过程中借热化学作用发展香气。先将木炭充分燃烧后，再将茶叶均放在焙笼上，翻动4到6次，直到茶叶充分干燥。 　　8、装袋入库 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-08 05:41:56 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-08 05:41:56 "},"book/taobao/六大茶叶种类.html":{"url":"book/taobao/六大茶叶种类.html","title":"六大茶叶种类.md","keywords":"","body":"六大茶叶种类 方法/步骤 1对于刚喝茶不久的朋友们来说，很容易把茶叶种类给混淆了。加上绿茶和红茶又比较常见，总是以为茶汤偏绿色的茶就是绿茶，茶汤偏红色的茶就是红茶。所以，经常把铁观音当成绿茶，把大红袍当成红茶！ 但实际上，铁观音和大红袍是属于同一类茶，那就是乌龙茶！ 其实，茶叶种类并没有大家想象中那么难分清楚，今天就用几张图帮大家彻底搞清楚我们中国茶叶的分类。中国茶叶的分类基本上是按照发酵度来区分的。 2六大茶叶种类发酵度划分 通过这张图可以很明显的看出，六大茶叶种类分别为绿茶、白茶、黄茶、乌龙茶、红茶、黑茶，它们分别对应了不同的发酵度，因为制作工艺及发酵程度的不一样，自然影响了口感以及茶汤颜色。 下面我们就来讲讲这六种茶叶的特性及知名度较高的茶叶品种。 首先是绿茶，很多人先入为主的觉得看上去颜色是绿的，就是绿茶。这种辨别方法，对也不对。诚然，几乎所有的绿茶泡出的茶汤都是以绿色为主，但并不是所有泡出绿色茶汤的茶就是绿茶，就像开篇提到的铁观音。 3绿茶发酵度为0% 绿茶是中国最早出现的茶类，是属于不发酵茶，也是六大茶叶中唯一的“不发酵茶”（敲黑板，这个是重点！）。绿茶也是中国产量最大的茶叶，目前生产的茶叶中有70%都是绿茶。在五十多年前的十大名茶评选中，绿茶就占了六席，由此可见绿茶龙头老大的地位。 绿茶的产区，从北到南，覆盖了大半个中国。 4绿茶产区分布图 其中，绿茶中知名的品种有：西湖龙井、碧螺春、黄山毛峰、庐山云雾。这些也都是市面上比较常见的品种，大家也都耳熟能详了。 绿茶之后是白茶，白茶是属于微发酵茶，茶叶发酵度只有20%—30%。主要产于闽东的福鼎和闽北的政和等地，以福鼎大白茶、福鼎大毫茶、政和大白茶等品种茶树的鲜叶为原料制作而成。 5白茶 白茶的历史可以追溯到清朝末年，当时白茶就已经远销欧美和东南亚，但是又逐渐走向没落，近几年，白茶才在中国茶友间流行起来。 6白茶产区分布图 虽然福建以外也有地方生产白茶，但公认的白茶原产地为福建的福鼎及政和，这两地产的白茶品质都得到了业内人士的一致认可。 白茶之后是黄茶，黄茶属于轻发酵茶。分为黄芽茶、黄小茶、黄大茶三种。主要的代表有湖南岳阳的君山银针、四川的蒙顶黄芽、浙江的莫干黄芽、安徽的霍山黄芽等。 7黄茶 黄茶的品质特点是''黄叶黄汤''，湖南岳阳为中国黄茶之乡。为什么黄茶的叶子是黄色的呢？这都得归功于它的制作工艺——“闷黄”。闷黄是黄茶类制造工艺的特点，也是形成黄色黄汤的关键工序。 8黄茶产区分布图 虽然黄茶的产量不大，但是产区却不少，覆盖了湖南、四川、浙江、安徽、广东(大叶青)、湖北等地。 接下来要讲的是乌龙茶。乌龙茶也叫青茶，兼具绿茶的清香和红茶的醇厚，属于半发酵茶。品种多，是极具中国特色的茶叶种类。为什么这么说呢？因为众所周知的“功夫茶”用的茶叶就是乌龙茶。 9乌龙茶 功夫茶最早起源于宋代，在福建及广东一带最为盛行，那为什么功夫茶就一定要用乌龙茶呢？因为乌龙茶介乎红、绿茶之间，为半发酵茶，只有这类茶才能冲出功夫茶所要求的色香味。 乌龙茶主要产自于福建、广东、台湾三地，按产地也就分为了闽北乌龙、闽南乌龙、广东乌龙及台湾乌龙。其中闽北乌龙也可以称之为“武夷岩茶”，其中以大红袍、肉桂、水仙最为知名。除此之外，还有大大小小如水金龟、铁罗汉、白鸡冠等上百个品种。 10乌龙茶产区分布图 但要追本溯源的话，产自于福建建瓯的“北苑贡茶”才是乌龙茶的鼻祖。北苑茶是福建最早的贡茶，也是宋代以后最为著名的茶叶，历史上介绍北苑茶产制和煮饮的著作就有十多种。北苑是福建建瓯凤凰山周围的地区，在唐末已产茶。 闽南乌龙几乎以铁观音为主，而这其中又以安溪铁观音最为出名，安溪还享有“闽南茶都”的称号，产于安溪的铁观音也是享誉海内外。但漳州的华安县也是铁观音的重要产区，是全国第二大铁观音生产基地，既有“明前茶”，又有“冬片茶”，形成“清香型五季茶”特色。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/六大茶类分类法.html":{"url":"book/taobao/六大茶类分类法.html","title":"六大茶类分类法.md","keywords":"","body":"六大茶类分类法是由著名茶学专家陈椽教授从茶叶品质系统性和制法系统性而提出的分类方法，并得到广泛认可和应用。 由夏涛教授主编的新版《制茶学》（第三版）由中国农业出版社于2014年12月出版。该版本是在出版于1989年5月的由陈椽教授主编的《制茶学》（第二版）的基础上修订而成。 其中，关于六大茶类的分类，第三版与第二版相比，有些地方有所删减，有些地方则有所合并和添加，比如绿茶、青茶和红茶分类的”目“中，分别增加了”再加工绿茶”、”再加工青茶“和”再加工红茶”。在此根据第三版的内容，制成思维导图形式，以便浏览，算是读书笔记。 根据茶叶品质系统性和制法的系统性，形成茶叶分类的“纲”，即六大茶类，然后再根据各茶类制法特点和外形差异分若干“目”，根据各类茶的外形内质特点分“种”。图片中的顺序就是按照“纲、目、种、花色”的顺序，其中的“花色”为例举。 一 绿茶 绿茶制法的基本工序为杀青、做形（包括揉捻）和干燥，其关键工序是杀青，这也是分类的最基本依据。杀青主要包括炒热杀青和蒸热杀青，干燥主要包括炒干和烘干。（斜体字部分为原文摘录，下同） 在“目”的层面，两版主要变化：与第二版相比，第三版的绿茶分类中，烘青绿茶与晒青绿茶出现在了“目”中，与炒青和蒸青并列。另外，增加了“再加工绿茶”。 上图中的炒青应该是和蒸青并列，而烘青和晒青则属于炒青后的不同干燥方式，并非与不同的杀青方式并列。所以，这种调整应该是结合了茶叶的综合分类法。而严格说来，这四者不是并列关系，前三者是一类，其中再分为三小类（大体可理解为炒炒、炒烘和炒晒），而第四者为单独一类。为表达方便，笔者在制图时对这四者的顺序略作了调整。 窨花绿茶、蒸压绿茶和再加工绿茶，都可理解为再加工绿茶。不过，图中的再加工绿茶，包括了即饮和茶汁，这两者已经属于饮料制品了。 图中最后一列的花色名称，为该类别中的代表性花色示例，为不完全列举。 二 黄茶 黄茶制法的基本工序为杀青、做形（包括揉捻）、闷黄和干燥，其关键工序是闷黄。根据闷黄先后和时间长短，可分为湿坯闷黄和干坯闷黄，其中湿坯闷黄又分为杀青后和揉捻后闷黄，干坯闷黄又分为堆积闷黄和纸包闷黄。 在“目”的层面，两版主要变化：将“杀青后湿坯闷黄”和“揉捻后湿坯闷黄”做了合并，统一为“湿坯闷黄”，“毛火后闷黄”改为“干坯闷黄”。 三 黑茶 黑茶加工分为两种类型，一种是鲜叶经杀青、揉捻、渥堆和干燥初制后，再经筛分和蒸压；另一种是以毛茶为原料进行干坯渥堆做色，再经筛分和蒸压。黑茶品质形成的关键工序是渥堆。 在“目”的层面，两版主要变化：合并了“干坯堆积做色”和“成茶堆积做色”，统一为“干坯渥堆”。 有茶友反馈说，在这个分类体系中，普洱茶不好直接定位与某一类茶。按照目前关于普洱茶的国家标准，当年的生茶与熟茶，理应归属于不同茶类。笔者曾写过一篇文章，《普洱茶究竟属于六大茶类中的哪类茶？有人说，它应该是第七大茶类，是这样吗？》感兴趣的朋友可点击查阅。 用当年原料加工的普洱生茶和普洱熟茶不难直接在六大茶类分类体系中找到定位，而以年份原料尤其是存放长时间的年份原料加工的生茶，以及长时间存放的年份生产，会因为内质的变化而增加分类定位的复杂性。但从消费者的角度，这其实也并不重要，我们只要大体把握其年份生茶内质变化的基本规律就够了。 此外，目前的产销环境与几十年前计划经济体制下的产销环境相比，已发生显著改变。当年对于普洱茶的界定与现在明显不同，某一形态如饼茶和沱茶与工艺的直接对应关系也总体明确而固定，但现在工艺与产品形态基本没有固定的对应关系，所以在确定分类时形态就基本不能作为区别茶类的直接依据。这也是我们在现在在谈论普洱茶分类时要注意的。 四 白茶 白茶制法的基本工序为萎凋与干燥，其关键工序是萎凋。萎凋可分为全萎凋和半萎凋。 关于白茶的分类，两版无变化。 不过，目前制茶工艺已因为相互学习借鉴而日益趋同，似乎已经没有明显的地域差异了。 近年来，在散状白茶的基础上，白茶的紧压茶也成为流行，成为与散茶并列的一个形态。同时，散茶可更进一步细分为芽茶、芽叶茶和叶茶。将这两点结合在一起看，更容易理解市面上的白茶产品形态。因此，就个人理解而言，此部分应该还有补充的余地。 有茶友问，“福鼎白毫银针和白牡丹是归为全萎凋还是半萎凋？”。我请长期在生产一线的行家作答如下：“白茶的主要工艺是萎凋、晾干，至于全萎凋或半萎凋可的具体定义，可能是从萎凋的时间结合萎凋的失水程度来进行的划分。因此，如果是这样的话，福鼎白毫银针和白牡丹可以归到半萎凋（福鼎工艺一般是萎凋到失水80-90%的程度，收堆、晾晒干；政和的工艺一般是失水到90%左右，文火干燥）。” 又有茶友提出，这个分类标准中没有包括新工艺白茶。我咨询茶学教授，答曰：“新工艺白茶是萎凋后进行了轻揉捻，可以是白牡丹，也可以是寿眉或贡眉。目前按照萎凋和芽叶大小分成四类，已经涵盖了，不需要再单列。”新工艺白茶虽然增加了轻揉捻工序，但并没有对品质产生根本性影响。有人曾开玩笑说，人按性别分为男人和女人，如果你问，一个整过容的人是男人还是女人？那这要具体看了，但该是男人还是男人，该是女人还是女人。在此引用这个玩笑，只为借以类比新工艺白茶的轻揉捻，并无对整容有丝毫的恶意，意在表达小变化不影响根本。 五 青茶（乌龙茶） 青茶制法的基本工序为萎凋、做青、炒青与揉捻、干燥，其关键工序是做青。做青可分为跳动、摇动和做手三类。 在“目”的层面，两版主要变化：增加了“再加工青茶”。 六 红茶 红茶制法的基本工序为萎凋、揉捻（揉切）、发酵和干燥，其关键工序是发酵。 在“目”的层面，两版主要变化：将“分级红茶”和“切细红茶”作了合并，统一为“红碎茶”；增加了“再加工红茶”。 几点体会 第一，但凡分类，总是要基于一定的原则和标准。不同的分类原则和标准，必然导致不同的分类结果。而把握关键点，则容易抓住根本。六大茶类分类法的核心依据是茶叶品质系统性和制法的系统性，而不是其它。所以，如果你有时候遇到按照其它一些分类标准而分类和命名的茶叶种类与六大茶类不一定能直接一一对应是，也无需诧异，因为标准不同，结果可能有差异。 第二，2014年正式实施的《茶叶分类》国家标准（GB/T30766-2014)中，确定了包括生产工艺、产品特性、茶树品种、鲜叶原料和生产地域在内的分类原则。基于六大茶类的基本分类，再结合茶树品种、鲜叶原料和生产地域等原则，甚至是采摘季节和树龄大小等，就能对于市面上花样百出的茶叶品种有一个更完整而直观的大体了解。 第三，教科书的分类是为了揭示总体基本规律，某一种分类方法未必能包括现实生产过程的所有情况，尤其是在外形与力度的分别上变数更多——即便是同样一个工艺流程，不同厂家也可能在某个环节或多个环节的具体参数上形成自己的细微或较大的变化。所以，每种分类，最为要紧的是把握其分类是所依据的最根本标准。 第四，制茶技术在生产过程中不断有各种探索和创新。生产实践的各种创新极为丰富，而教科书的修订则是隔时而行，有的甚至是很长时间才修订一次。同时，即便现在没有纳入教科书的分类，在教科书的未来修订中也可能会有对有关生产实践的相应吸收与调整。 第五，中国茶叶品种繁多，通多都是现有了多种多样的茶叶品种，后有分类方法。分类方法就如一把尺子，抓住主线来对众多的茶叶品种进行区分，以便厘清特质、加深认识和便利交流，同时指导生产与消费。 第六，茶叶分类方法，其实更似你先有了一大堆书，后来买了带着一层层高地不一格子的书架，你可能能将你的绝大部分书立着甚至横着放进去，但可能总有些书放不进去，而即便放不进去，也不影响你对于书的阅读与使用。所以，我们也不需要期待一个分类方法去囊括所有的茶叶种类。 第七，现实中关于茶叶分类的一些常见混乱，往往是因为分类标准的混搭和不一贯，或者是命名与分类两者的差异所致。 举个例子，“普洱茶属于六大茶类中的哪类茶？”这个问题，在我看类，大体类似于“武夷茶属于六大茶类中的哪类茶？”是同样的问题。普洱和武夷最早都是一个地理概念，对应着一定工艺特征的茶叶品类，普洱茶最初大体是当时“普洱的茶”的简称与统称，“武夷茶”大体是当时“武夷的茶”的简称与统称。只不过后来这些地域这些茶品的制茶工艺又不断演化，再加上如今国家标准的界定与日常交流话语的不全然一致，导致了其涵义的不断变化和指称的时空错乱。 又一个例子，霍山黄芽到底是什么茶？大家从分类图中可以看到，霍山黄芽既在绿茶中出现，又在黄茶中出现；而在《中国茶经》中，霍山黄芽只是在绿茶种类的词条中出现。为何如此？其实只不过是因为”霍山黄芽“中的”黄芽“最早指的是特定茶树品种的黄色茶芽，以此原料按绿茶加工，则为绿茶；后来逐渐又有了黄茶制法，则为黄茶。 再一个例子，你还可以接着问，安吉白茶是什么茶？安吉是地理概念，白茶是指茶树鲜叶的白化特征，是哪类茶，则要看你按照什么加工工艺来加工了，按绿茶工艺加工则是绿茶，按红茶加工则为红茶，按黑茶工艺加工则为黑茶。只不过，现在的安吉白茶主要是加工为绿茶，所以大家的普遍印象是，安吉白茶就是绿茶。 总而言之，分类的根本要紧之处在于：明确分类标准，把握分类本质，揭示基本规律，加深事物认识，便利沟通交流。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/单丛茶.html":{"url":"book/taobao/单丛茶.html","title":"目录","keywords":"","body":"单丛茶是一种传统名茶，产自广东，具有形美、色翠、味甘、香郁的特点。介于全发酵的红茶与不发酵的绿茶之间的半发酵乌龙茶，它体现了乌龙茶制作过程最精细的制茶工艺。单丛茶成品茶既有绿茶的清香，又有红茶的浓厚滋味，是集花香、蜜香、果香、茶香于一体的浓香型茶叶。由于独特的制作工艺，形成了它特殊的品质----条索紧结，呈乌褐色或灰黄褐色，油润，具有自然的花香、山韵蜜味；汤色橙黄（初制茶）或金黄（精制茶），透彻明亮；滋味醇爽、持久、回甘力强；极耐泡等特点。 中文名 单丛茶 外文名 Dancong Tea 别 称 凤凰单丛 岭头单枞茶 主要原料 单丛茶树叶 是否含防腐剂 否 主要营养成分 茶多酚、儿茶素、多种氨基酸等含量，无机矿物元素主要有：钾、钙、镁、钴、铁、锰、铝、钠、锌、铜、氮、磷、氟、碘、硒等 主要食用功效 提神益思，防癌症抗衰老，减肥，消脂，助消化，降血压，促进血液循环，具有止咳化痰功效 适宜人群 老少皆宜，食品适宜人群 副作用 无 储藏方法 避免晒太阳。防湿。常温保存。 目录 1 概况 2 采摘制作 3 品种 ▪ 历史 ▪ 价值 概况 编辑 单丛茶 ：主要产地在广东，其中以 凤凰 单丛、岭头单丛，其它各地也陆续推广。凤凰拥有近四千棵单枞老树茶，最老的宋种将近700年历史，而且品质最好的单枞都在凤凰镇乌岽山上。岭头单丛而也在近三十年来快速发展，慢慢打出市场。 单丛茶 ：历史上是“单株采制”的特定名称。现代概念的单丛茶，是原有“单株采制”的延伸，有单株采制的、也有单丛品系、单丛品种采制的。现代单丛茶产品，分“ 凤凰单丛 ”和“ 岭头单丛 ”两个品名。 凤凰单丛茶，属于 乌龙茶 系,半发酵型.具有形美、色翠、味甘、香郁的特点 九百多年的种植历史，加上独特的地理环境，造就了今日凤凰茶的辉煌.宋代时，凤凰山民发现了叶尖类似鹪嘴的红茵茶树，便开始试种，凤凰茶也称“鸟嘴茶”。传说宋帝赵昺被元兵追赶到乌岽山，饮红茵茶后称赞好茶,遂称为宋茶。 民国时期，凤凰水仙茶参加巴拿马万国商品博览会并荣获银奖。 1986年，在全国五大茶类134个品种的评比中，凤凰单枞茶夺得第一名。 2002年，在国际名茶评比会上获得八项金奖。 大类凤凰水仙是种类,单丛级别分三档次,因50年代对凤凰茶进行分级定名, ①凤凰单丛;以选制方式[单株采制]命名　; ②凤凰浪菜;以制程中间环节[做青手法]命名, ③凤凰水仙;以凤凰茶群体品种命名. 每档又分三级,每级分三等.还有级外茶,特级茶. 自然花香型（53种） 2012年，在杭州国际名茶评比会上由元成茶业提供的八仙单丛获得了（特等奖） 采摘制作 编辑 素有“茶乡”之称的潮州，茶文化历史源远流长。凤凰单丛茶经过十道环环相扣的古法程序制作出来的凤凰宋种单丛茶，具有独特的山韵风格，耐冲泡，深具“形美、色润、香郁、味甘”四绝之特点。　优越的生态条件、良好的茶树品种资源、精湛的采制工艺让凤凰元成宋种赢得了“茶中极品，潮州活化石”的美誉。 [1] 品种 编辑 宋种1号 别名 宋茶 ， 又名团树叶、大叶香、岩上珍、黄栀香、民兵茶、丰产茶、东方红、老 茶王 、宋种古单丛。有性繁殖植株。乔木型， 大叶类，中芽种。 历史 南宋末年，太平寺的高僧看好乌岽大庵村山腰这一得天独厚的地理位置，于是便栽种了宋种单丛茶。金枝玉叶，茶底整洁，叶镶红边，山韵特显，茶气连连绵绵。有齿颊留芳之感，隽永幽远，清快爽适，清幽淡雅、意味深长的韵味。元成宋种系有性繁殖植株，茶树龄已在600年以上，形状奇特，品质优良，该株的抗逆性和适应性极强，有独特的山韵风格。元成宋种茶现为单丛茶的佼佼者，植株最大、最健康，是粤东最老正枞茶树。每年产量是10-13斤左右。2013年的产量是11.2斤。 600多年的宋种单丛茶树 元成宋种单丛茶采摘 是凤凰茶区现存另外最古老的一株茶树。系从乌岽山凤凰水仙群体品种的自然杂交后代中单株筛选而成。生长在位于海拔约1150米的乌岽李仔坪村顶厝几块巨大的泰石鼓之间。据说是南宋末年由村民李氏几经选育后传至今天，树龄达600多年。现管理人为村民文振南。老丛已经有批量扦插繁殖，形成宋种1号无性繁殖系后代。凤凰各地现均有引种栽培，高山地带数量较多。 主干圆径为1.65米，离地面60厘米处有三大分枝，圆径分别为0.65米、0.94米和0.75米，分枝密度中等， 叶片呈上斜状着生，成叶长10.9厘米，叶宽4.3厘米，叶形椭圆，叶尖渐尖，稍下垂，叶面微隆, 叶色绿，有光泽，叶质硬度中等，叶身内折，主脉明显，侧脉平均10对，叶缘微波，叶齿细、浅、钝，共33对。由于茶树苍老，育芽能力一般，每年只采摘一轮春茶。 其后代育芽能力较强。春芽萌发期在春分前，春茶开采期在谷雨前几天。发芽密度中等，芽梢较短，新梢平均长2．5厘米，着叶2—3片，节间长0.8厘米，嫩梢黄绿色，无茸毛。生殖生长因树老衰弱，近几年无花也无果，抗寒抗旱力较强，适应性较好。 价值 单株产量高。]958年前，春茶株产8斤左右。]959年对该树进行三改(改土、改园、改树)， 即刮除树身寄生苔藓地衣，剪除枯枝，搬开树边岩石，垒石砌坎，扩大园基，客：上二尺余厚，使茶树日趋茂盛、高大。]963年更为旺盛，采制春茶1 7.8斤，为历史最高纪录。以后株产逐年下降，可悲的是1987年该树遭到一个精神病人的砍伐，产量更为低落。后经管理户文氏采取有效措施加强管理，逐渐恢复生机。至1990年采制春茶9.8斤，每斤售150元。1991年春茶10.6斤，每斤450元。1992年春茶株产9斤。1993年春茶10.5斤，每斤430元。1994年春茶11斤，每斤450元。1995年春茶9斤，每斤800元。]996年春茶7.2斤，每斤950元。1997年管理户在该茶树附近，种下白叶单丛茶树32株争吃养分。加上九十年代乌岽公路通车，到乌岽山的人慕名必定参观宋茶和拍照，受人为攀采和践踏，使植株枝疏叶稀，土壤坚实，树势逐年衰退。1997年采制春茶6.1斤。1998年春茶5.4斤。1999年春茶降至4.8斤。2000年春茶只剩4斤。成茶条索紧实沉重，色乌褐油润，汤色金黄，香气浓郁，味道甘醇，老丛韵味独特，回甘力强，耐冲耐泡。是著名的单丛名茶之一。 花香单丛茶 别名东方红之父。有性繁殖植株。小乔木型，小叶类，迟芽种。 因成茶冲泡时溢出自然的芝兰花吞而得名。同时又是当今凤凰镇单株产量最高的—株茶树，故有东方红之父的称谓。原种系从乌岽山凤凰水仙群体品种的自然杂交后代中单株筛选而成。由管理人文建新的祖上选育后，代代相传至今。生长在海拔1 200米的乌岽中心村村后的，山顶筋底处。树龄400多年。老丛1984年由镇政府组织扦插繁殖，至今已经有较大批量的无性繁殖后代，形成花香单丛茶老丛无性繁殖系。其后代在凤凰高l山茶区引种较多。 植株高大，工干明显， 树姿开张， 最低分枝下垂接近地面，形似蘑菇状。树高4.7米，树幅5.5X5.7米，主干圆径1.58米，分枝密度大，叶片上斜状着生。叶长6.3厘米， 叫宽4厘米，叶形椭圆或卵圆，叶尖圆尖，叶面平滑，叶色深绿，有光泽，叶身内折，叶质硬度中等，叶缘微波状，叶脉8对， 叶齿疏浅， 齿数21对。春芽萌芽期在清明前后，春茶采摘期在立夏前。 发芽密度大，育芽能力强，幼嫩芽梢浅绿色，无茸毛。春梢长5.4厘米，着尘叶数3—4片，节间长1.2厘米。开花期11月15—30日，花冠直径4.2X3.6厘米，花萼5片，花瓣6—8片，花丝乳白色160枚，花药黄色，柱头三分* ，浅绿色，结实率低，朔果灰褐色，内含茶籽多数为2—3粒。/ 单株产量高。树势壮旺，年采摘3轮次，全年株产超过20斤。1990年采制春茶14斤。1995年春茶15斤，每斤毛茶销售200元。1996年5月6日采制春茶16斤，每斤售出220元。1997年春茶13斤，1998年春茶19斤，1999年春茶19.5斤。 成茶外形美观，条索紧结较直而纤细，色洋灰褐油润，汤色金黄,滋味醇厚，芝兰花香气清高，老丛特韵明显，耐冲泡。 宋种芝兰香 ，也是宋代4株老名丛之一.老丛母树共有2株。产地及分布:原产广东省潮安县凤凰茶区。相传植于南宋末期，距今有700多年历史。这几年在广东省农业厅、潮州市林业局主持下，采用嫁接法推广。广东北部、西部茶区有少量引种。 特征:植株高大，其中一老丛母树高5，9m，树冠幅7·9m，树姿较直立，分枝密度中等，叶片上斜状着生。叶长椭圆或略倒卵圆形，叶色黄绿，叶身内折，叶面平，叶缘波状，叶尖渐尖，叶齿稀锐，叶质中等。芽叶黄绿色，茸毛少，一芽三叶百芽重113g.特性:芽叶生育力中等。一芽三叶期5月上旬。老丛单株产量最高9·9kg。后代产量较高。适制高香型乌龙茶，制红茶、绿茶也有突出的品种香，香型为芝兰香。制乌龙茶，品质特优，香气幽雅，有细锐的芝兰花香，滋味醇厚鲜爽，回甘力强，汤色橙黄明亮，极耐冲泡，有明显的高山老丛\"特韵\"。春茶放至年底 \"返春\"后，香味更优。适应性强。扦插繁殖力中等。盛花期在10月下旬，花而不实。 适栽地区:最适区为海拔800m以上的广东大、中叶种茶区，次适区为400m以上大、中叶种茶区。) 栽培要点:宜采用双行单株或单行双株条植，每667m2，植3000株左右。用分段修剪法适时定型修剪，投产前期以养为主，采养结合，促进分枝。 蜜兰香单丛 产地及分布:原产广东省潮安县凤凰茶区，母树已有200年以上历史。现凤凰茶区种植面积近7Ohm 特征:植株高大，树姿半开张，分枝中等，叶片稍上斜状着生。叶长椭圆形，叶色黄绿，富光泽，叶身内折，叶面平，叶尖渐尖，叶缘平，叶齿钝浅，叶质厚软。芽叶浅黄绿色，茸毛少，芽三叶百芽重122.0g. 特性:芽叶生育力强。叶芽三叶盛期在4月中下旬。产量高，每667m2达150~300kg。制乌龙茶，品质特优。成茶有浓蜜幽兰特韵，香气酶郁持久，滋味浓醇甘爽，汤色橙黄明亮，耐冲泡，品质稳定。制 红茶 、 绿茶 也有品种特韵。抗逆性和扦插繁殖力郡较强。盛花期10月中旬，花而不实。 ) 适栽地区:最适宜区海拔为600m以上的广东大、中叶种茶区，次适宜区为300m以上茶区。 栽培要点:宜采用双行单株或单行双株条植，每667m2植3000株左右。 八仙 又名八仙过海。是原有单株母树的无性繁殖个体，经多年培育形成的老丛。其后代属无性繁殖系。乔木型，中叶类，迟芽种。母树原产于凤凰镇凤西垭后村，系从凤凰水仙群体品种的自然杂交后代中单株筛选而成。其无性繁殖后代，现已在凤凰茶区及潮安县各产茶镇广泛栽培。也是凤凰茶区主要栽培品系之—。饶平县、粤北、粤西茶区亦有引种。该种系乌岽山名叫文混的茶农于1898年从垭后村黄甘树的“大乌叶’(与“接种”单从茶同一母树)茶树上选取插穗，用长枝无性繁殖法扦插活八株茶苗后，分别栽种在刁二问地理条什的茶上，长大后除了树型有差异外，其他都保持原母树的优良性状，有如八仙过海各显神通一样，1958年凤凰茶叶收购站站长尤炳回将其命名为“八仙过海”单丛茶，后来简称为“八仙茶”。 调查树生长在海拔1050米的乌岽李十子坪村下厝叫下路脚的茶园里。栽培历史100多年，管理人为村民文统涛。植株高大，树姿较开张，树高4.8米，树幅5.3X4.8米，主干圆径0.95米，分枝密，最低分枝高度90厘米，叶片上斜状着生。叶长9.8厘米，叶宽4.2厘米，叶形长椭圆，叶尖圆尖而下垂，叶面隆起，叶色深绿，有光泽，叶身内折，叶质硬度中等，叶缘波状，叶脉9对，细、浅、利的叶齿28对。春芽萌发期在清明前后，春茶采摘期多数年份在立夏后3—5天，是乌岽山春茶采收最迟的“收山茶”之一。发芽密度，户等，芽叶肥壮，其后代育芽能力较强，幼嫩芽梢深绿色，无茸毛。—般春梢长14厘米，着生叶数3—4片，节间长1.8厘米。11—1 2月为开花期，盛花期11月5—20日，花冠直径3.8X4.2厘米，花萼5片，花瓣6—8片，花丝乳白色中略带浅绿色，98—170枚， 花药浅黄色，柱头三分* 浅绿色，1995—1996年都是只开花不结实。 单株产量高。植株枝繁叶茂，年新梢生长3轮，全年株产约14斤茶。1996年5月13日采制春茶9斤，每斤1200元。1997年5月3日采制春茶9.5斤，每斤2000元。1998年春茶9斤，每斤1200元。1999年春茶9.3斤，每斤1400元。是凤凰山名单丛之一。 成茶条索紧直，较其他单丛茶硕大，黑褐色，油润有光泽，汤色金黄，清澈明亮，韵味独特，甘醇爽口带微甜，香气高锐浓郁，耐冲耐泡。 姜花香 又名姜母香、通天香。有性繁殖植株。小乔木型，中叶类，中芽种。 原种系从乌岽山凤凰水仙群体品种的自然杂交后代中单株筛选而成。因成茶冲泡时，飘溢出清高的姜花香气而得名；又因滋味甜爽中带有轻微生姜辣味而称为姜母香。生长在海拔约900米的凤西中坪村半山腰的茶园里，树龄100多年，管理人张鹏臻。老丛已经有少量扦插和嫁接繁殖，其后代主要分布在中坪及附近各村。 植株较高大，树姿较开张，树高3.86米，树幅4.26X3.76米，主干圆径1.1米，分枝密度中等，叶片上斜状着生。成叶长9.6厘米，宽3.7厘米，叶形长椭圆，叶尖渐尖或钝尖，叶面微隆，叶色绿，有光泽，叶身平展，叶质硬度中等，叶缘波状，叶齿疏浅，齿数28对，叶脉6对。春芽萌芽期在春分前后，春茶采摘期在谷雨前后。发芽密度较大，发芽较整齐，育芽能力中等，芽色浅绿，无茸毛。春梢肥壮，持嫩性较强，春梢长11厘米，着生叶数3—4片，节间长2，4厘米。每年新梢生长3轮次，国庆节以后为新梢休止期。盛花期11月15—30日，花冠直径3X3．6堙米，花丝140—156枚，花量少，结实率低，朔果大部分内含2粒茶籽.单株产量中等。全年株产茶叶4斤左右。1996年4月27日采制春茶2.1斤每斤售价1500元。1997年4月17日采制春茶2.8斤。2001年采制春茶2.2斤，每斤销售8000元。 成茶条索紧直，较纤细，浅黄褐色油润，汤色金黄明亮，姜花香气清高持久，味道鲜爽，微甜中稍带生姜味，韵味独特，耐冲泡。是凤凰山名单丛茶树之一。 玉兰香单丛 产地及分布:原产广东省潮安县凤凰茶区，母树有200多年历史。现凤凰茶区种植面积近7Ohm2。广东罗定、英德茶区有少量引种。特征:植株高大，树姿较直立，主干明显，分枝密度中等，叶片稍上斜状着生。叶长椭圆形，叶色绿，富光泽，叶身稍内折，叶面微隆，叶尖渐尖，叶缘平，叶齿稀浅，叶质较软。芽叶黄绿色，茸毛少，一芽三叶百芽重130·g。 特性:芽叶生育力较强。一芽三叶期为4月下旬。产量中等，每667m2达100kg以上。适制乌龙茶。成茶色泽乌亲，玉兰花香清幽酶郁，滋味浓醇鲜爽，汤色清澈明亮，连泡十儿次香味犹存。适应性和扦插繁殖力较强。盛花期11月上旬，花多少实。 适栽地区:最适宜区为海拔400~500m以上广东大、中叶种茶区。 栽培要点：（同玉兰香单丛）。 桂花香单丛 无性系。小乔木型，大叶类，中生种。二倍体。为凤凰单丛花蜜香型珍贵名丛之一，因有桂花香味而得名。 产地及分布:原产广东省潮安县凤凰茶区，母树有300多年历史。 特征:植株高大，树姿半开张，分枝尚密，叶片上斜状着生。叶片椭圆形，叶色黄绿，富光泽，叶面平，叶缘平，叶身内折，叶齿稀锐，叶质厚软。芽叶淡黄绿色，茸毛少，叶芽三叶百芽重115.0g. 特性:芽叶生育力尚强。叶芽三叶期为4月上、中旬。产量中等，每667m2达100kg以上。适制乌龙茶。成茶桂花香清幽细长，滋味浓醇爽口，汤色橙黄明亮，耐冲泡。抗寒性强。扦插繁殖力强。盛花期为11月上旬，花而不实。 适栽地区:最适宜区为800~1000m的广东省大、中叶种茶区，次适宜区为400~600m茶区，低山、水田不宜种植。栽培要点：（同玉兰香单丛）。 蛤蛄捞单丛 又名老蛤摸。无性系。.因母树形态取名。 产地及分布:原产广东省潮安县凤凰茶区，在凤凰高山茶区有少量种植。特征：植株高大，树姿开张，分枝密度中等，叶片稍上斜状着生。叶片长椭圆形，叶色浅绿，叶面隆起，叶缘呈背卷状，叶尖渐尖，叶齿稀锐，叶质中等。芽叶黄绿色，茸毛少，一芽三叶百芽重126.0g.特性：芽叶生育力中等。一芽三叶期为4月中旬。产量中等。适制高香型乌龙茶。成茶花蜜香浓郁持久，滋味浓醇甘爽，有独特的\"山韵\"，汤色橙黄明亮，极耐冲泡。适应性和扦插繁殖力中等。盛花期10月下旬，花而少实。适栽地区：海拔600m以上的广东大、中叶种茶区。栽培要点：（同玉兰香单丛）。 宋种蜜香单丛 又名红薯香单丛。是宋代老名丛之一。制乌龙茶有明显的甘薯蜜味，故亦称“宋种红薯香单丛”。 产地及分布：原产广东省潮安县凤凰茶区，相传植于南宋末期，距今有700多年历史。其后代主要分布于凤凰镇海拔10OOm左右的高山茶区。特征：植株高大，树姿半开张，分枝中等，叶片稍上斜状着生。叶长椭圆形，叶色浅绿，富光泽，叶面平，叶身内折，叶缘平，叶尖渐尖，叶齿钝浅，叶质厚钦。芽叶黄绿色，茸毛少，一芽三叶百芽重119g 特性：芽叶生育力中等。一芽三叶期在5月上旬。老丛单株产量7.0kg以上。后代产量较高。成品茶有浓郁的“蜜香”。制乌龙茶，品质特优，蜜香高锐持久，有花香，滋味浓厚爽口，“蜜韵”突出，回甘力强，极耐冲泡，汤色橙红明亮。制红茶、绿茶，有特殊品种香。扦插繁殖力中等。盛花期10月下旬，花而不实,适栽地区：最适宜区为海拔800m以上的广东大、中叶种茶区，次适宜区为海拔400m以上大、中叶种茶区。\" 栽培要点：宜采用双行单株或单行双株条植，每667m2，植3000株左右。 二矛芝兰香单丛 系凤凰单丛十大花蜜香型珍贵名枞之一，是凤凰水仙群体种的优异的单株。无性系，小乔木，中叶类，中生种。属CamelliaSinesis种，二倍体。产地及分布：共有早、中、晚生三个株系，其中二矛芝兰香和乌岽芝兰香分别原产于广东省潮安县凤凰镇凤溪村委会二矛村和该镇凤西村委会中坪村、乌岽村、东郊村，母树有300多年历史。凤凰茶区种植面积越1000亩。特征：二矛芝兰香植株尚高大，树姿较直立，分枝密度中等，叶片斜着生；叶片窄长，叶色绿，叶面平展，叶缘波状，叶身内折，叶尖渐尖，似“乌嘴状”，叶齿疏锐，叶质中等；芽叶黄绿色，茸毛少，一芽三叶百芽重103克；盛花期10月下旬，花而不实。 特性：芽叶生育力中等，一芽三叶期为4月下旬；产量中等，一般亩产干茶100公斤以上；特别适制高香型乌龙名茶。经GC/MS分析，成茶含40种香气物质，主要赋香成分为顺式茉莉酮（7.03%）等。感官审评，茶叶芝兰花香幽雅细长，滋味醇厚回甘，汤色橙黄明亮，极耐冲泡。多次获广东省名茶称号。适应性尚强，扦插繁殖力强。 适栽地区：最适宜区为海拔800－1000米的大、中叶种茶区种植，400米以下低山、水田不宜引种。 岭头单丛茶， 原产于广东省潮州市饶平县浮滨镇（原坪溪乡，坪溪镇）的岭头村。1981年广东省农业厅在全省茶树品种会议上单独列为一个品种；1988年，被广东省良种审定委员会定为省茶树良种，由国家农业部正式命名为“岭头单丛”茶；2002年，国家农业部农作物品种审定委员会审定为国家茶树良种。岭头单丛茶树，属小乔木型，中叶类，特早生种，植株高大，树姿半开张，分枝中等，叶长椭圆形，平均叶长9.0 cm，叶宽3.5cm，叶脉7-9对，叶色黄绿，富光泽，叶面平，叶缘平，叶尖渐尖，叶齿钝浅，叶质较厚软。芽叶黄绿色，绒毛少，一芽三叶百牙重121.0克。花冠直径3.0-4.0cm,花瓣7瓣，子房绒毛中等，花柱三裂。育牙力强。发芽早，二月份萌芽，一芽三叶盛期在三月中下旬，年生育周期长，至十一月底仍有茶可采。春茶一芽二叶干样含氨基酸1.5%，茶多酚37.2%，咖啡碱4.4%。插杆繁殖力强。岭头单丛茶传统做法乌龙茶，品质稳定，外形条索紧结壮硕，色泽黄褐油润，花蜜香高锐持久，滋味浓醇甘爽，回甘力强，有独特的微花浓密香味，汤色橙黄明亮，耐冲泡。制红茶，绿茶滋味浓郁，香气特高，有特殊香味。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/大乌叶，鸭屎香.html":{"url":"book/taobao/大乌叶，鸭屎香.html","title":"单丛茶中的两颗明珠：大乌叶，鸭屎香！","keywords":"","body":"单丛茶中的两颗明珠：大乌叶，鸭屎香！ 乌叶，白叶是茶农们根据茶树的叶片颜色来进行命名的。茶叶颜色浅绿的，叫白叶，颜色较深的，叫乌叶。乌叶与大乌叶是等同，它的叶容相对较大，香气明显，高扬。中低山的鸭屎香从茶叶形就有点像大乌叶，但它的香气还是有区别的，鸭屎香的香气比较温和沉稳一点；对于网上的资料显示鸭屎香就是大乌叶，这是正确的，曾经有段时期大乌叶是归属乌叶系，但现在分得细了，两者也就各不相干了。总体来说两者品种味道差别还是蛮大的，如果你喝几次鸭屎香和大乌叶，是能够很容易辨别出来的。以春茶为例，从干茶上就已经很明显香气不同了，大乌叶的香气比鸭屎香高锐张扬，干茶是那种清幽细锐的兰花香；这种香喝起来还有点甜的感觉而鸭屎香它又称“银花香”，它是那种在凤凰当地野生金银花的味道，很多人也没有接触过，所以也不大清楚究竟是什么样的；鸭屎香它的干茶的香气，如果你熟悉它，闻着味道就知道它就是鸭屎香；虽然也是高香，它的香气会稍微沉稳 ，俗称“有肉” 。从口感上来辨别二者的话，大乌叶它的口感是比较高香霸道一点，醇和回甘；鸭屎香香沉茶汤比较甜，底蕴有点偏苦。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/客家炒茶做法.html":{"url":"book/taobao/客家炒茶做法.html","title":"客家炒茶做法.md","keywords":"","body":"客家炒茶做法 茶的做法所了解的只有炒茶（应该说是客家炒茶），炒茶也是绿茶的一种，特点是浓香，茶味重，饮后唇齿留香，回甘持久绵长，炒茶是很小众的一款茶（喝的人都是揭西人为主，哪怕潮汕，梅州都是以乌龙为主其它地方更不用说了），可能是鲜明的特点注定了不能大众化。 炒茶的做法分为:鲜叶采摘，杀青，揉捻，炒青，干燥。除采摘揉捻外，杀青炒青干燥都是在大铁锅里用柴火炒，从杀青到做好要五至六个钟，炒茶炒茶重点在于炒，做工对于茶品质的高低起决定性作用，能不能成为高品质的茶就要看做茶人的功夫了（前提是有好的茶青，何为好的茶青，茶的品种，生长环境，各方面都上佳称为好茶青），做茶的人在做茶时对火候的掌控温度的把握更是重中之重，若有哪个环节出差错了就将会前功尽弃，做茶是件非常费时费力费精神的事，做茶其实是件很辛苦的一件事，所以每杯茶里不仅有茶香还有做茶人艰辛的付出。有人说炒茶最重要的是杀青，现在的工艺来说杀青对于有接触过做炒茶的人来说根本不是事，做炒茶重要在于炒青与干燥，也就是最后两个环节，还有人会问炒茶有没放香精之类的，没有，根本不需要，炒茶的特点是浓香茶味重，不是清香茶味轻的茶，清香茶茶香在于表茶香容易散（不是说清香茶就有放香精之类），浓香茶茶香在于里不容易散，炒茶本身已经是够味，如果再添加其它东西只会画蛇添足，适得其反，所以炒茶是可以放心饮用的茶饮品。炒茶性寒，胃寒者，体虚者还是少喝或者喝红茶黑茶。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/店招.html":{"url":"book/taobao/店招.html","title":"店招","keywords":"","body":"店招 全屏店招工具： http://www.yymoban.com/diy/a/dianzhao/tool/ 全屏店招在线制作地址： https://diy.yymoban.com/quanpingdianzhao.php 在线美图秀秀地址： http://www.yymoban.com/tool/zuotu/mtxx.html Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/淘宝店铺可行性报告.html":{"url":"book/taobao/淘宝店铺可行性报告.html","title":"淘宝店铺可行性报告.md","keywords":"","body":"淘宝店铺可行性报告 店铺运营规划 店铺基础 （一）店铺的上架：上架三十到五十件左右的货，带一些潮流爆款包装的商品带动店铺的流量销量 （二）店铺的装修：美观打造店铺的排名 （三）店铺的SEO引擎优化：引擎优化 也就是说搜索引擎优化 主要用于买家搜索我们的商品一个曝光率的提高 （四）店铺关键词：把店铺的关键词优化最新流行词提高商品搜索率 （五）店铺名字优化：提升店铺的曝光率 推广引流 （一）站内外推广：主要针对网站首页流量相对来说比较广对于新店铺的效果也比较不错的 （二）App推广：我们自身公司的app流量推广 主推服饰 针对性比较大 效果会比较明显 （三）资源群推广：公司有组织了很多的资源群都是用客户推广去做下单率高但是利润会低一些 （四）推广的目的：前期开始打造店铺所有的推广操作店铺基础打造都是为了上活动因为新店铺打造起来的唯一渠道就是上活动 以上做的一些推广基础等等都是为了店铺的一个活动资格去积累操作的 促销活动 （一）活动资格：店铺达到活动要求公司后台会显示店铺上活动资格公司会联系客户及时上活动因为是有截止时间第一次活动资格出来没有上报的话后期活动资格就不好做了 （二）活动操作：只要活动上去了店铺大概已经成形第一次活动销量都是会比店铺平时销量高出很多及时发货追问好评达到店铺的一个好评率 （三）活动收尾：活动结束后及时对接店铺销量整合店铺整体这时活动结束销量已经稳定店铺排名上升卖家及时学习操作店铺 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/淘宝开店高质量宝贝发布技巧.html":{"url":"book/taobao/淘宝开店高质量宝贝发布技巧.html","title":"淘宝开店高质量宝贝发布技巧","keywords":"","body":"淘宝开店高质量宝贝发布技巧 来经营一家淘宝店铺的时候，首先要学会的就是如何来发布一款宝贝，有的买家觉得宝贝发布是非常简单是一件事情，其实在发布宝贝的时候是有非常多的细节需要我们去注意的，下面我们就来讲讲如何发布一款新品宝贝吧！ 一、点击发布宝贝 卖家中心-宝贝管理-发布宝贝 二、类目选择 我们把需要发布的宝贝名称打出来，系统会自动匹配类目，如下图。我们需要选择与自己宝贝最相符合的类目，如果自己不能确定，可以参考右边宝贝示例或者直接参考同行的类目。 类目选择好以后，就开始填写宝贝信息了。 现在很多做电商的朋友，其实水平都特菜，很多时候不知道应该从何下手，每天忙活过来忙活过去的，也没有多少的生意，到各个论坛，逛所谓的大神的帖子指导什么的，最后也发现对自己没什么用，到网上找各种各样的教程学，结果觉得很散，好不容易学明白了，结果玩法又变了，老坑爹了所以如果你真心的想让自己在电商这个行业有一番作为，让自己的店铺起死回生，你可以来这个群学习，开头是：三七五，中间的部分是：二二三，最后的三位数字是：七九零，按照顺序组合起来，你就能找到一个学习的新大陆。 1、宝贝信息填写 ⑴宝贝类型选择全新。 ⑵宝贝标题要全部写满，这样搜索引擎会更精准的搜索到我们的宝贝。 ⑶宝贝卖点主要是将宝贝的质量，服务，物流，能够吸引到顾客的亮点写出来，很多人往往都把这里给忽略浪费掉了，虽然宝贝卖点在无线端不做展示，但是在PC确有一个非常好的位置，如果不写的话，就浪费掉了。 ⑷宝贝属性是一个非常重要的点，要把他填写正确，如果填写错误的话就会引起流量减少或者直接导致宝贝下架。宝贝属性是根据宝贝类目不一样而转换的，首先是品牌，如果宝贝不是自己厂家直接生产或者授权的话就不要填写品牌，直接填写其他就可以了，否则容易引起涉嫌侵权或假冒伪劣的一些不必要纠纷，货号尽量自己编写，有差异化，有可能可以避免同款太多，材质部分如果不是100%纯棉的话不要填写纯棉，年份季节写最新的年份2018年，就不要写2017或者2016了，一些基本的属性尽量都要填写完整，如果属性不确定的话可以问供货商，也可以看同行同款宝贝的属性是怎么填写的。 ⑸宝贝定制要确定可以定制就选择支持定制就可以了，不支持就不用管。 ⑹宝贝主图有五张，大小不能超过3MB，尺寸不能低于700*700的正方形，这样会自动有放大镜功能。第一张图片用测款中点击率最高的图片，因为这是顾客看到的印象图，第二张，第三张，第四张主要展示宝贝的细节，卖点，质量，营销，服务与物流。第五张图要产品的白底图，这样可以增加手淘首页曝光率。这里还要说下第六张图，仅限服饰，尺寸是800*1200的长图，有长图的商品会优先展示。主图视频需要另外下载视频软件ido制作，他在PC和无线端都能展示，尺寸是1:1，时间不能超过60s，最好是9~30s，突出商品卖点，吸引顾客即可。 ⑺宝贝规格，宝贝是什么颜色就添加什么颜色，偏浅或偏深在备注里面注明，之后上传这个颜色的宝贝图片，如果颜色一样图案不一样可以自己编写。 尺码分为很多种，有通用，中国码，美码，英码，均码，根据自己宝贝的尺码填写就可以了，如果上面没有宝贝尺码，也可以自定义尺码，细节方面都可以编写到。 ⑻宝贝定价，一口价不能定太低，不然会影响之后参加活动，要保证自己宝贝的利润空间不能低于30%。价格设置之后不要再更改，总件数可以根据自己实际库存，也可以参照同行。 ⑼采购地一般选择国内，如果你是海淘或者代购的话就可以选择海外及港澳台，是哪采购就选择哪里，并且在库存类型一定要选择非现货，否则在标题前面没有代购的字样显示。 ⑽付款模式一般是一口价。 ⑾宝贝视频是展示在详情里的视频，需要订购视频服务才能使用。 ⑿宝贝详情也是一个重点，首先要注意的是宝贝的尺寸，他分为PC和无线端，PC是750*高（不超过1000）。可以先把图片制作好直接上传，或者直接使用供货商的图片。无线端是宽480~1240，高1540以内，使用神笔可以自动压缩，并且详情不能超过2.5MB，否则会导致无线端打开图片速度很慢。 ⒀店铺中分类看宝贝适合哪一类就选择哪一类，如果没有可以自己到店铺装修，宝贝分类里面去添加新的分类。 2、宝贝物流服务 如果之前设置好了物流模板可以直接使用，没有就新建运费模板，模板名称自己编辑，宝贝地址填写发货地址，发货时间一定如实设定，如果超过时间没有发货在天猫和淘宝都要赔偿机制，所以这个是需要重视的，如果包邮直接选择卖家承担运费。也可以自定义，计价方式一般都是按件数，也可以按重量和体积，根据实际情况而定，运送方式选择快递，默认运费一件需要多少钱就填多少钱，每增加一件一般都不需要加钱，也可以根据实际而定，而一些偏远地区不包邮也可以在指定条件包邮里勾选，设置包邮条件，可以按照件数，金额设定，在地区里面将包邮的地区勾选出来就可以了。 3、售后保障信息 售后服务和保修服务天猫是必须提供发票的，淘宝没有硬性规定，可以不勾选，避免出现售后问题，退换货承诺和服务承诺是必须勾选的。 4、宝贝其他信息 ⑴库存计数选择买家付款减库存，防止宝贝刚刚放上去遇到同行恶意拍下导致库存不足而下架。 ⑵上架时间一般都是选择立刻上架，如果设置定时上架时间最好不要超过24小时，因为这样可能不能获得新品标签。 ⑶会员打折可以不参与，如果回购顾客多的话也可以参与会员打折，这个根据自己店铺情况设置。 ⑷橱窗推荐要勾选，既然是要上的新品，肯定是要做推荐的，这样当系统推的时候可以优先推新品。 只要我们将所有的步骤都一步一步填写精准完整，那么我们的宝贝就是高质量的宝贝了！ 同样搜索人气的关键词，在线商品数越少的关键词，越容易获得流量！每个类目都有这样类似的词可以用！ 怎么找？ 1.在卖家中心的生意参谋中，就可以找到你自己类目的关键词，这个是官方工具，而且是免费工具，数据准确！（不要买第三方的工具，数据是过期的） 2.关键词按照以下标准选择： PS：搜索人气/在线商品数=1:1的关键词可遇不可得，一般能找到1:3的关键词就已经很容易获得流量了！不要太追求完美！ 3.选择1个核心词+2个蓝海词+3~5个属性词加1个炮灰词，然后一定要利用词根不变原则组合标题（如果词根被错误拆分，将导致搜索降权！前功尽弃！） 上架之后没有激活关键词权重 宝贝上架第一天，如果不理不管，只是在店铺等访客进店，店铺最多只会有10-20个访客，如果你的店铺也是这种情况，那么是因为标题权重没有被激活！ Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/淘宝现有茶叶品种.html":{"url":"book/taobao/淘宝现有茶叶品种.html","title":"淘宝现有茶叶品种.md","keywords":"","body":"一、淘宝现有茶叶品种： 1、铁观音/龙井/茶叶(628761) 2、普洱茶/茶饼/茶砖(429618) 3、花草茶/果味茶/保健茶(541899) 4、饮料/蔬果汁/茶饮(43059) 5、绿茶/龙井茶/碧螺春(141644) 6、藕粉/麦片/冲饮品(80722) 7、乌龙茶/铁观音/大红袍(272662) 8、红茶/正山小种/祁红(104076) 9、白茶/黑茶/黄茶(39137) 共：2281578个店铺 二、淘宝现有保健茶品种： 1、苦荞茶 3057 2、杜仲茶 2180 3、大麦茶 2473 4、牛蒡茶2907 5、八宝茶2953 6、罗布麻茶2224 7、银杏茶 1464 8、人参茶 5840 9、灵芝茶 3932 10、苦丁茶 5432 11、肠清茶 2564 12、姜茶 1757 13、芦荟茶 7664 14、玉米茶 2214 15、三清茶 462 共：15个品种 44909个 店铺 三、花茶品种： 四、淘宝共有金花茶店铺57家 金花茶品牌：桂人堂40 喜茗5 Golden Flowers（荷兰进口）1 五、同效竞品： 1、一泯茶香 灵芝茶 3931 功效：降三高茶降压茶血糖血脂免疫抗癌 价格：125.00元/500g产地：西藏 2、绞股蓝 5419 功效：无糖型抗癌降血压血脂血糖 价格：168.00元/500g产地：云南 3、苦荞茶 3062 功效：防癌抗癌降血压降血糖降血脂防糖尿病 价格：100.00元/500g产地：四川 4、野生番石榴茶 405 功效：减肥降血糖降血脂降血压消炎止血治糖尿病 价格：93.75元/500g产地：广西 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/茶叶的基本分类.html":{"url":"book/taobao/茶叶的基本分类.html","title":"茶叶的基本分类【图解】","keywords":"","body":"茶叶的基本分类【图解】 　　茶叶的基本分类：我国茶叶历史非常悠久，到现在最少也有数千年的历史了。我国也是属于茶叶大国，由此我们可以知道我国茶叶的品种绝对是非常的多。那对于茶叶有所了解的人都知道，我国茶叶主要分为六大类，也就是红茶、绿茶、黑茶、白茶、黄茶和青茶（乌龙茶），但是有的说还有花茶、花草茶、药茶，其实这三种只能说是茶饮料吧！不能说是茶叶吧。最多也就是花茶也算吧！毕竟有的花茶原料中还是有茶叶的存在。那今天我们主要就是来了解一下这六大茶类中的一些品种，一起来了解一下。　　中国现代名茶有数百种之多，根据其历史分析，有下列三种情况：有一部分属传统名茶，如松萝茶、蒙洱茶、西湖龙井、庐山云雾、洞庭碧螺春、黄山毛峰、太平猴魁、恩施玉露、信阳毛尖、六安瓜片、屯溪珍眉、老竹大方、桂平西山茶、君山银针、云南普洱茶、苍梧六堡茶、安化黑茶、福鼎白茶、政和白毫银针、白牡丹、安溪铁观音、凤凰水仙、闽北水仙、武夷岩茶、祁门红茶、武当道茶、古丈毛尖、正山小种、金骏眉、雨花茶、凤凰单枞、云南滇红、粤东山龙茶等。　　另一部分是恢复历史名茶，也就是说历史上曾有过这类名茶，后来未能持续生产或已失传的，经过研究创新，恢复原有的茶名。如泾渭茯茶、渠江皇家薄片、渠江薄片、渠江茶、休宁松罗、涌溪火青、敬亭绿雪、九华毛峰、曾侯银剑茶、汉家刘氏茶、龟山岩绿、蒙顶甘露、仙人掌茶、天池茗毫、贵定云雾、青城雪芽、蒙顶黄芽、阳羡雪芽、鹿苑毛尖、霍山黄芽、顾渚紫笋、径山茶、雁荡毛峰、日铸雪芽、金奖惠明、金华举岩、粤梅香、顺生茶叶、东阳东白等等。　　还有大部分是属于新创名茶，如婺源茗眉、蒙洱月芽、蒙洱太空茶、南京雨花茶、云雾毛尖茶、雪峰禅茶、无锡毫茶、茅山青峰、金坛雀舌、天柱剑毫、寒冰天露、岳西翠兰、齐山翠眉、红山龙、望府银毫、临海蟠毫、千岛玉叶、遂昌银猴、都匀毛尖、高桥银峰、金水翠峰、永川秀芽、上饶白眉、湄江翠片、安化松针、遵义毛峰、文君绿茶、峨眉毛峰、雪芽、雪青、仙台大白、早白尖红茶、黄金桂、秦巴雾毫、汉水银梭、八仙云雾、南糯白毫、午子仙毫等等。第四种就是天然营养保健茶，如可以吃的蛋白桑叶茶。　　以上就是有关于茶叶的一些基本分类，说真的要是要把所有的茶叶品种全部说出来的话，那有可能说三天三夜还没有办法全部说出来，主要就是我国茶叶品种太多，还有就是一些我们根本就不知道的品种。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/茶坨,茶饼、砖茶、散茶和袋泡茶.html":{"url":"book/taobao/茶坨,茶饼、砖茶、散茶和袋泡茶.html","title":"茶坨,茶饼、砖茶、散茶和袋泡茶.md","keywords":"","body":"喝过那么多茶，没想到其中的套路那么多！ 茶的制作售卖形式分类有茶坨,茶饼、砖茶、散茶和袋泡茶之分，但是它们的特点你都知道吗？ 砖茶又称蒸压茶，以茶叶、茶茎，有时还配以茶末压制而成的块状茶。砖茶根据其原料的不同，可以分为黑砖茶、花砖茶等。 而茶饼又称饼茶、团茶，茶饼是饼形的，喝的时候撬下来5到7克，用矿泉水泡制，注意第一次的茶汤不要喝。 茶饼和茶砖是紧压茶的代表，制成茶饼和茶砖都是为了长途运输和长时间保存，一般制成茶饼或者茶砖的都是红茶或黑茶。 散茶是市场上最常见的茶，其色泽，香味都是能够方便直观的看到，很多人喜欢买散茶，一是能够直观的辨别出茶的外观好坏，二是散茶在泡制的时能更加出味，发挥茶叶之致。只是对喝茶新手来说很难控制泡茶的量。 而袋泡茶是为了符合现代人习惯新兴出来的茶类，其特点是 (1)具有定量性，一般是一包茶叶的的量够饮用一杯。 (2)设计更加的合理方便，茶包上设有提线，既能避免手与茶叶的直接接触，又能不必用手接触茶叶，茶渣清理只需拿住线将茶包提出， 杯内不会留下茶叶残渣，非常干净卫生。 (3)袋泡茶原茶叶一般是采用一定规格的碎茶进行包装生产的，茶叶颗粒小，细胞破碎率大，因此能够更快出茶香。 无论是茶饼、茶砖、散茶还是袋泡茶，每种茶都有其存在的特点，喝茶时可以根据自己的需要进行购买选择。 以上词条内容均来源网络，均系原作者观点及所有，仅供参考，不代表京东立场，感谢您对京东的支持，祝您购物愉快！ Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"book/taobao/金骏眉.html":{"url":"book/taobao/金骏眉.html","title":"金骏眉.md","keywords":"","body":"金骏眉一开汤空气中就满是淡淡的甜香，汤色并不是所熟悉的酒红色，而是类似色拉油般的金黄色，啜一口入喉，有着水果般的甘甜，比一般的正山小种红茶的汤水更绵软，果香更加醉人，仿佛是来到了果园中。口腔中、鼻腔中满是清甜的气息。 扩展资料： 金骏眉色亮而润，闻起来有天然薯香，品其有淡淡蜜味，入口甘醇。其泡出后出汤好似滴油一样，绝对是视觉和味觉的绝妙享受。同时它具有耐冲泡的特点，第一、二水的出水时间最好可控制在5秒，第三、四水10秒左右较合适，第五、六泡为20秒，之后可20秒递增。上等的金骏眉馥香持久，初入口感觉柔和、醇滑，很快两颊生津，继而回甘无穷。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-10-17 20:53:41 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-10-17 20:53:41 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Glossary file name (defaults to GLOSSARY.md) 词汇表文件，默认对应的文件是 GLOSSARY.md。该文件主要存储词汇信息，如果在其他页面中出现了该文件中的词汇，鼠标放到词汇上会给出词汇示意，可以将鼠标移到下面两个词汇上看下效果。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-08 11:47:43 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-08 11:47:43 "}}